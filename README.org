#+OPTIONS:     H:2 num:t     
#+TITLE: entropy-emacs introduction
#+AUTHOR: Entropy

[[file:../annex/img/logo_2018-02-07_13-58-05.png]]

* TABLE OF CONTENT                                                      :TOC:
  :PROPERTIES:
  :CUSTOM_ID: h-b5b9b12a-b302-44f0-b6a9-94e6b246762c
  :END:

- [[前言][前言]]
- [[配置介绍][配置介绍]]
  - [[各配置文件概览][各配置文件概览]]
  - [[快捷键绑定汇总][快捷键绑定汇总]]
  - [[Emacs on windows][Emacs on windows]]
  - [[字体设置][字体设置]]
  - [[最后][最后]]
- [[Learning major mode within entropy-emacs][Learning major mode within entropy-emacs]]
  - [[artist-mode][artist-mode]]
  - [[web-mode][web-mode]]
  - [[popwin-mode][popwin-mode]]
- [[learning interactive function][learning interactive function]]


* 前言
  :PROPERTIES:
  :CUSTOM_ID: h-be01fd00-762d-4097-a1a0-48b18e3079cf
  :END:

  #+BEGIN_QUOTE
  centaur-trace-version: 55b07da55415b48ee75cde67a3f99dd80f3bb491

  Improve keybindings and hydra of `dumb-jump`.
  #+END_QUOTE

  本仓库包含了我个人的emacs配置,这些配置文件中的内容和代码大多搜集于网上,同时包含了自己的一些琐碎的
  配置,由于现阶段对elisp还没有系统学习,因此也谈不上配置代码的优雅和严谨.

  我会把搜集和自己改进的代码放进[[file:Recode-for-config-learning.org][文中的一个标题中]],这是一个org文档,因此最好使用emacs的org-mode来查阅这
  样可以提高阅读和检索效率.

  本人对于emacs也是小白一枚,因此这个仓库是可以共享给一些想要入门emacs的伙伴们以便一起学习和成长.

  这个配置文件的结构是这样的:
  #+BEGIN_EXAMPLE
.
├── annex
│   ├── img
│   └── www
├── elements
│   ├── custom-config
│   └── main-config
├── init.el
├── org
│   └── README.org
  #+END_EXAMPLE

  - annex文件夹存放关于这个文档的附件诸如图片和网页缓存
  - elements文件夹,存放了各种配置文件


  本配置现在均已使用 =use-pacsge= 来进行延迟启动管理,在三星840evo的SSD上的启动时间是五秒以内,当然优
  化空间有待提高.

  *注意*

  值得注意的是默认用户配置文件为 [[../elements/custom-config/custom-example.el][custom-example.el]] 是一个样板配置,在这个配置中有默认自定义变量的定义
  注释和设置函数. 第一次使用本配置请手动复制这个文件并,重命名为 =custom.el= ,这个文件中可以自定义一
  些函数或者设置,比如org-mode的capture功能的具体设置等.

  假设你第一次使用本配置,那么emacs会自动下载所有需要的包,但是启动画面最后会有 *WARNING* 提醒内容,这
  是由与各个包的作者对于其作品的优化和理解导致的一些小bug,可以忽略,当你第二次启动emacs时候这些提醒内
  容都会消失.

  *平台要求:*

  由于本人仅仅使用Gnu/Linux,所以我不保证在windows和mac上的通效性. 但是我经常使用windows来测试包的跨
  平台兼容性,因此我做了些对于windows平台的兼容管理.由于对于windows上来说,像php和python都不是预装的,
  因此很多包我在windows上是不启用的.同样的对于一个叫做 =org-download= 的包,由于其在windows上无法使用
  截图功能(默认它可以使用ImageMagick来做转换,但是截图功能已经不能像linux上一样使用系统自带的截图组
  件.)因此虽然我没有对它进行windows的兼容管理,但是请不要在windows上使用它的截图功能,仅仅使用拖拽就可
  以了.

  最后欢迎萌新和大神们来提问和帮助我改进配置.

* 配置介绍
  :PROPERTIES:
  :CUSTOM_ID: h-bd34ca1e-8f06-4427-865c-8c8e1e0a0a67
  :END:
  配置文件中很多都是引用[[https://github.com/seagle0128/.emacs.d][centaur emacs]]的配置一些模式文件也是整个照搬其原生文件的,本人对于这些引用都原
  样使用其版权协议和作者信息,如果 'centaur emacs' 的作者对本仓库中的文件版权信息有疑问和追诉,请联系
  本人,同时也希望 'centaur emacs' 的作者对本仓库进行帮助和建议,在此感谢 'centaur emacs' 为我开辟了一
  条新的轻量化emacs配置思路.

** 各配置文件概览
   :PROPERTIES:
   :CUSTOM_ID: h-7c5f441b-01f1-4a12-9e96-6c2b984b5e2f
   :END:
*** DONE [#A] 概览提示
    CLOSED: [2018-04-11 Wed 15:54]
    :PROPERTIES:
    :CUSTOM_ID: h-4ddce93d-9923-41d4-88aa-9b05cb2566eb
    :END:
    - State "TODO"       from              [2018-04-09 Mon 19:28]

    这份配置介绍主要以概览了解为主，我在配置中引用了一下配置代码做说明，如果你是一个新手，那么你完全
    不必要去了解这些代码的含义。

    *介绍方法：*

    我是通过引用一个个配置文件的功用来说明你可以从我的emacs配置中获得哪些功能的使用，以及如何使用它
    们。

    这当中的对于windows上使用emacs的配置是我的心得，也是本配置的一个重点。


    *Tips:*

    对于这份配置来说，大多数的自定义配置，你都可以从 =custom-example.el= 了解参数设置的方法以及参数
    的含义。

*** 基础包
    :PROPERTIES:
    :CUSTOM_ID: h-c4264d38-b7fc-4779-bab4-9b3b17a782e4
    :END:
**** 常量和自定义变量设定
     :PROPERTIES:
     :CUSTOM_ID: h-8ea1af39-1130-4a08-bbab-43666cb5d90c
     :END:
***** 常量 [[file:../elements/main-config/init-const.el][init-const.el]]
      :PROPERTIES:
      :CUSTOM_ID: h-26b2d96c-2894-4d9f-99b4-cb3df9268269
      :END:
      常量包定义了一些系统自动探测的量,比如用户级别,系统类型,系统视窗环境等.
***** 变量 [[file:../elements/main-config/init-defcustom.el][init-defcustom.el]]
      :PROPERTIES:
      :CUSTOM_ID: h-bc2ef5d0-e22c-4d55-8827-61763d6de39d
      :END:
      自定义变量是用户在起始设置自定义配置参数而定义的,这其中包含了自定义函数的变量声明.

      比如变量 =entropy/my-package-archives= :
      #+BEGIN_SRC emacs-lisp
        (defcustom entropy/my-package-archives 'melpa
          "Set package archives from which to fetch."
          :type '(choice
                  (const :tag "Melpa" melpa)
                  (const :tag "Emacs-China" emacs-china)
                  (const :tag "Tuna" tuna)))
      #+END_SRC
      这段代码定义了一个包管理器镜像源的自定义变量旨在让用户通过 ~custom.el~ 这个文件来设定这个变量
      的确切值,如果不进行手动设置,那么它的默认值是 =melpa= .

      设置方法是:
      #+BEGIN_SRC emacs-lisp
      (setq entropy/my-package-archives 'tuna)
      #+END_SRC
      (这里假定设置为tuna =清华镜像= 的源)

      同样的其他变量可以设置相对应的函数参数,具体请查看 [[../elements/custom-config/custom-example.el][custom-expample.el]] 这个文件中变量描述.

**** basic 设定 [[file:../elements/main-config/init-basic.el][init-basic.el]]
     :PROPERTIES:
     :CUSTOM_ID: h-78bd7c3c-79bf-4626-8de3-0f16dbd266f4
     :END:
     这个文件是用来设定 'entropy-emacs' 的基本配置的
***** personal infomation
      :PROPERTIES:
      :CUSTOM_ID: h-8ad25c03-614d-4ae2-9291-14a4db73e7be
      :END:
      用来设定基础的个人信息设置,包括了用户姓名和邮件地址.
***** Default emacs interface config
      :PROPERTIES:
      :CUSTOM_ID: h-830bae24-77f8-4684-9567-cecca86b9c25
      :END:
      用来设定emacs的基础ui,包括:
      - 隐藏菜单栏
      - 隐藏滚动滑块 (注意: 在daemon模式下是无用的)
      - mode-line上显示列号
      - 显示光标类型为竖线
***** 设定默认dired 路径
      :PROPERTIES:
      :CUSTOM_ID: h-6e2e4b95-19da-4fce-8bfc-f0ab2f7e68da
      :END:
      注意默认dired的路径也是默认的treemacs在无具体文件buffer的情况下打开的路径
***** 备份设置
      :PROPERTIES:
      :CUSTOM_ID: h-5299cbca-ad13-42af-8072-d39e581e6bb6
      :END:
      备份包括源文件备份和自动保存这两个概念,一般我的文件都是以git进行版本控制的,因此并不需要源文件
      备份. 倒是自动保存很有必要,因为外一断电,或者emacs突然挂了呢.

      因此这里的设置我是设置的默认开启自动保存,关闭自动备份. 在emacs中自动保存的文件是以文件名为
      =#file-name#= 的方式命名的,在下一次打开该文件的时候emacs会自动提示是否需要 revert 它.
***** 当前行高亮以及lisp括号匹配设置
      :PROPERTIES:
      :CUSTOM_ID: h-b39fbbf1-892e-4a0f-b47e-c83e6c04c05a
      :END:
      - 当前行高亮默认是被我关闭的，因为在阅读一些重度使用font-lock的文件时候（比如html,css,js;特别是
        那些程序生成的html网页文件）会相当的卡顿。

        不过在swiper等包中是自动局部使用的。

      - lisp 括号匹配分成在是否启用 =init-highlight.el= 这个配置的两个部分，共同点是在这两个模式下都
        支持lisp的括号匹配，但是在启用 =init-hiighlight.el= 后会更加有视觉效果。


      或者你可以通过手动在当前buffer打开该功能：
      =M-x: hl-line-mode=

***** 窗口相关配置
      :PROPERTIES:
      :CUSTOM_ID: h-d4bf4c8f-23d7-47c7-b3c0-04ef00ed85da
      :END:
****** DONE [#A] 窗口跳转配置
       CLOSED: [2018-04-11 Wed 17:01]
       :PROPERTIES:
       :CUSTOM_ID: h-c3ae9466-ffd4-4f5a-b905-67efb99be628
       :END:
       - State "DONE"       from "TODO"       [2018-04-11 Wed 17:01]
       - State "TODO"       from              [2018-04-09 Mon 19:27]
       使用插件 =windmove= 来优化 原生的跳转操作,并可以显示窗口编号。例如下图：\\
       [[file:../annex/img/Snipaste_2018-03-12_16-58-49_2018-03-12_16-58-57.png]]

       [2018-04-11 Wed 16:54:32] 对于窗口跳转增加以下快捷键：
       - =C-x <left>=
       - =C-x <right>=
       - =C-x <up>=
       - =C-x <down>=


       主要运用了 ~windowmove-*~ 系列的函数。详细配置是从[[https://github.com/troydm/emacs-stuff/blob/master/windcycle.el][这个仓库中]]获得的。

       同时禁用了 ~buffer-right/left~ 的原生快捷键，为了防止误触，并且有了 ~window-undo~ , 这个功能
       很鸡肋。

****** 窗口布局配置
       :PROPERTIES:
       :CUSTOM_ID: h-2b48df50-fe02-447f-ac76-c19f678c85ed
       :END:
******* eyebrowse mode
        :PROPERTIES:
        :CUSTOM_ID: h-4b80c834-0352-4b4b-8423-d4553407b9c5
        :END:
	#+BEGIN_QUOTE
	[[https://github.com/wasamasa/eyebrowse#about][eyebrowse]] is a global minor mode for Emacs that allows you to manage your window
	configurations in a simple manner, just like tiling window managers like i3wm with their
	workspaces do. It displays their current state in the modeline by default. The behaviour is
	modeled after ranger, a file manager written in Python.
	#+END_QUOTE
	以上是官方的一段介绍,我总结一下:\\
	eyebrowse是一个窗口布局管理器,你可以当前的frame激活的window的组合定义一个组并且保存它,这样就
	可以同时在一个frame中创建多个工作组,这样做的好处是你不需要破坏当前的窗口布局而去创建新的窗口
	布局,以工作组的概念可以来回切换多种窗口布局.具体的操作方式请查阅官方README.

	如图：
	[[file:../annex/img/Snipaste_2018-03-12_17-49-51_2018-03-12_17-50-08.png]]

	如上图所示：\\

	我设置了三个组别：
	- basic work space
	- readme edit
	- 新闻阅读


	我只要每一次通过快捷键 =C-c C-w .= 来弹出以上所示的candidates,就可以选择跳转到任意一个工作组，
	新建一个工作区的快捷键是 =C-c C-w <C-c or workspace number>= 。

	eyebrowse暂存的工作区中每一个工作区中的窗口布局都可以完好保存，并且通过 =desktop-save=,可以
	很好方便的保存工作组到文件中，以便下一次打开emacs时候使用。

	当然这个插件也不是完美的,从逻辑上来说它有这样一个缺陷:\\
	#+BEGIN_QUOTE
	eyebrowse默认是通过0~9组别的工作组的编号设置来快速通过其前缀快捷键(=C-c C-w=)来快速切换工作
	组的,当然它还内置了工作组可视化选择工具即 =eyebrowse-switch-to-window-config= 来通过输入文
	字的方式来选择某一个工作组(前提是你设定好了一些工作组的tag),但是这个操作函数有一个缺陷,就是
	无法在候选组中忽略当前工作组,这就导致了,当我们不知道当前工作组的编号或tag的时候,可能会选中
	本工作组本身,这就产生了一个冗余操作.因此由于我现在没有理解透彻它的源代码,因此只是设定了一个
	函数叫作 =entropy/current-slot= 用于在不知道当前工作组的编号的时候手动显示其编号(目前无法显
	示tag),然后再进行切换操作,那么这样就避免了误选中本身的问题,但这仍然很不方便,因此后续我会给
	原作者提一个issue.
	#+END_QUOTE

	[2018-02-08 Thu 18:23:01]

	以上的一个体验级别bug得到了原来作者的回复和解决,解决办法如下:
	#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'eyebrowse
  (defun eyebrowse--read-slot ()
    "Read in a window config SLOT to switch to.
  A formatted list of window configs is presented as candidates.
  If no match was found, the user input is interpreted as a new
  slot to switch to."
    (let* ((current-slot (eyebrowse--get 'current-slot))
           (candidates (--keep (and (/= (car it) current-slot)
                                    (cons (eyebrowse-format-slot it)
                                          (car it)))
                               (eyebrowse--get 'window-configs)))
           (candidate (completing-read "Enter slot: " candidates))
           (choice (cdr (assoc candidate candidates))))
      (or choice (eyebrowse--string-to-number candidate)
          (user-error "Invalid slot number")))))
	#+END_SRC
	回复页面: [[../annex/www/The%20logical%20issue%20in%20eyebrowse%20·%20Issue%20#77%20·%20wasamasa_eyebrowse.html][cache]] [[https://github.com/wasamasa/eyebrowse/issues/77#issuecomment-363916664][link]]

	如果你细心的话就会发现上面我所展示的eyebrowse工作组展示图是已经修复这个bug后的展示。

        [2018-04-17 Tue 10:26:29] complete the entropy/current-slot function for perfectly show both
        of name and it's slot number

******* winner mode
        :PROPERTIES:
        :CUSTOM_ID: h-89d7f5a0-53f8-4f20-8c3c-6dca65d9fa13
        :END:
	winner mode 是emacs内置的一种临时布局切换工具,当你启用了它后可以通过快捷键 =C-c left= 或
	=C-c right= 来切换窗口布局的历史快照.
****** 自定义buffer关闭函数: =entropy/kill-buffer-and-window=
       :PROPERTIES:
       :CUSTOM_ID: h-1f79b331-8d42-47d0-8ee6-df9b24979415
       :END:
       由于emacs默认关闭一个buffer的函数 =kill-buffer= 在多窗口环境下并不能关闭这个buffer的窗口,这
       会导致一个文件的buffer占用多个窗口的问题,而我希望的是一个buffer在非必须条件下始终只占用一个
       窗口,因此我了一个函数专门用来修改快捷键 =C-x k= 对应的函数:
       #+BEGIN_SRC emacs-lisp
(defun entropy/kill-buffer-and-window ()
  (interactive)
  (if (< (length (window-list)) 2)
      (kill-buffer)
    (kill-buffer-and-window)
    )
  )
(global-set-key (kbd "C-x k") 'entropy/kill-buffer-and-window)
       #+END_SRC

       这个函数旨在先判断一个frame下面当前有几个window,然后根据window的数量来进行 'kill-buffer' 或
       者 'kill-buffer-and-window' 操作.

       其中 ~window-list~ 函数是定义在emacs的c源代码中,并不需要引用其他的包,所以并不需要担心版本升
       级后无法使用的问题.

       当然emacs有原生的kill-buffer-and-window函数,它绑定的快捷键是 =C-x 4 0= ,但是我一般只是记忆
       =C-x k= , 这个快捷键在我的脑海里是第一反应,所以很多时候会有误操作.

       因此为了方便和记忆快捷键,我把 ~kill-buffer~ 这个绑定到了 =C-x M-k= ,这样的这样一组函数我就可
       以全部记住了,很矫情不是吗 😏 .
****** 窗口大小快捷设置
       :PROPERTIES:
       :CUSTOM_ID: h-5bc309fd-7b35-401a-aa7d-211509b08d27
       :END:
       这里使用的是一个叫做 =windresize= 的包 并且绑定快捷键为 ~C-<f10>~

       *使用方法*
       #+BEGIN_QUOTE
       /注意/: 只有在多窗口的情况下这个包的运作才会有效,多窗口是指2个或者2个以上的窗口.
       #+END_QUOTE
       在多窗口环境中使用该快捷键然后使用左右或者上下键来扩大或者当前buffer的窗口大小从而影响整个布局.
****** 关闭所有buffer除了当前buffer
       :PROPERTIES:
       :CUSTOM_ID: h-575105ca-96ce-4647-adcd-5b161397d049
       :END:
       函数名为 ~entropy/kill-buffer-and-window~ 并没有绑定快捷键.

       这个函数的概念是:\\
       在使用emacs的时候会发生这样的事情: 一个frame中开启了很多的buffer,但是通常我都是专注与一个
       buffer的内容,其他的buffer只是临时开启的,但是每次都手动关闭它们真的好累,严重影响到情绪,这时候
       我就需要一个可以一键关闭所有无关紧要的buffer.

       因此目前这个函数只能保留当前buffer,还很简陋,以后会改进成一个插件.

****** 交换窗口位置
       :PROPERTIES:
       :CUSTOM_ID: h-7371136e-d13d-4ebd-8933-8b1d2aa0d6fa
       :END:
       *插件包:* =windmove=

       对于我通常在大屏幕上进行作业的时候,眼睛习惯盯住左边的半个屏幕,因此有了对这个插件的需求.

       使用方法是使用快捷键 =C-c C-left= 或 =C-c C-right= 或 =C-c C-top= 或 =C-c C-down= 来进行上下
       左右移动当前buffer(所谓当前buffer就是指光标所在的buffer).
****** 窗口居中
       :PROPERTIES:
       :CUSTOM_ID: h-277ebeb9-fb04-4caa-9bba-8410989e1986
       :END:
       *函数名:* ~entropy/center-text~

       这个函数是用来把当前buffer按照一定的margin来居中在当前的window中的,这样我就可以在大屏幕上找
       到专注的感觉.

       但是有一个bug: 就是一旦把emacs的窗口贴边,就会导致buffer变成一条竖线,所以我一直只在最大化窗口
       下执行这个函数,原因是因为这个函数中的margin是写死了的,并不能更具emacs的frame大小进行自动适应,因
       此有很大的改进空间,对应的取消函数是 ~entropy/center-text-clear~ .

       melpa上本身有一个插件[[https://github.com/anler/centered-window-mode][=centered-window-mode=]] 但是现在([2018-02-02 Fri 20:42:21]) 找不到了,我
       联系了作者,作者称他现在因为要照顾小孩,没时间维护这个包了,至于为什么melpa上没有这个包了,它已
       经在melpa的github项目的issue中提交了问题.

       [2018-02-07 Wed 19:39:04] centered-window-mode回归改名为centered-window [[https://github.com/melpa/melpa/issues/5280][github issue]]

       至于 =centered-window-mode= 这个包，有一个不足，就是对于有些buffer是没有办法居中的,但是我自定
       义的函数是可以在任何buffer中运行的,我准备fork它改进一下(如果有能力的话 😈 ).

       [2018-03-12 Mon 17:35:48] 由于这个包的作者不再维护这个包，并且这个包裹有bug（对于spaceline的
       兼容不是很好，虽然当前我是退回使用的powerline；并且对一些buffer并不能居中在emacs27中，它提供
       了一些api来定制，但是我不会。），

****** 初始化emacs启动大小和屏幕位置
       :PROPERTIES:
       :CUSTOM_ID: h-3b606284-69ac-4b01-a9a2-ee0ab4a931f0
       :END:
       这个是一个个人嗜好,以后会添加自定义参数以便用户自己可以关闭或者更改大小位置参数.
***** 默认制表符宽度
      :PROPERTIES:
      :CUSTOM_ID: h-a0768b7e-1eb0-4a35-8610-cf4434683533
      :END:
      我设置为8,国际通用标准. 以后也会加入自定义设置.

      [2018-03-26 Mon 15:20:14] 由于每个编辑器对于tab的显示宽度是不一样的，因此我统一在emacs中默认禁
      用了tab，当然我也设置了一个变量来用于用户自定义设置是或否默认开启ta： \\
      - 变量：
        =entropy/tab-enable=
***** 默认开启utf-8默认编码的文件格式
      :PROPERTIES:
      :CUSTOM_ID: h-19de105c-7c40-452c-9276-bfeaa453a094
      :END:
      - org
      - html
      - css
      - txt \\
	随系统编码设置 和 函数 =entropy/toggle-utf-8-and-locale= 开启或关闭而定论。

        #+BEGIN_QUOTE
        函数 entropy/toggle-utf-8-and-locale的描述是这样的：

        (entropy/toggle-utf-8-and-locale)

        This function was to toggle entire UTF-8 environment to or
        back from locale.

        ----------------------------------------------------------

        配套的设置是变量 =entropy/language-environment= 是用来设定编码环境的。
        #+END_QUOTE
      - c
      - php
      - js
      - sh
***** 自动折行设置
      :PROPERTIES:
      :CUSTOM_ID: h-646746b8-6779-44d3-a9fd-02d0ab42d762
      :END:
      emacs默认是不会像其他编辑器一样回行显示超出窗口宽度的行的,因此设置为:
      #+BEGIN_SRC
      (setq truncate-lines nil)
      #+END_SRC
      truncat 是截断的意思,也就是只显示长行的一部分.

      以上的这个设置在 =org-mode= 模式下是没用的,因为 =org-mode= 默认是会覆盖折行设置的,所以我又再加
      上一条关于org-mode的默认折行设置:
      #+BEGIN_SRC elisp
      (setq org-startup-truncated nil)
      #+END_SRC

      [2018-03-12 Mon 21:35:48] 还是初始化截断比较好，不然观察agenda还是其他文档好麻烦，因此设置为`t'
***** Dired 配置
      :PROPERTIES:
      :CUSTOM_ID: h-f45a62ef-11ae-4a34-b96b-207d5eac1a46
      :END:
      主是对dired-buffer进行了色彩化.
***** frame透明化函数以及快捷键设定
      :PROPERTIES:
      :CUSTOM_ID: h-24c04d13-5492-48a6-a8f4-0ad81e132d4b
      :END:
      这是一个辅助的功能,旨在让你在emacs进行工作时候,可以进行娱乐活动(开小差 😃). 这对于我来说是在
      用emacs的时候可以在后台看视频或直播,又或者有时候需要摘抄网页上的内容,这时候就可以通过透明化的
      frame来一边记录,一边看背景中的浏览器的网页信息.

      *函数内容:*
      #+BEGIN_SRC elisp
(global-set-key (kbd "<f6>") 'entropy/loop-alpha)

(setq alpha-list '((95 55) (100 100)))

(defun entropy/loop-alpha ()
  (interactive)
  (let ((h (car alpha-list)))
    ((lambda (a ab)
       (set-frame-parameter (selected-frame) 'alpha (list a ab))
       (add-to-list 'default-frame-alist (cons 'alpha (list a ab)))
       ) (car h) (car (cdr h)))
    (setq alpha-list (cdr (append alpha-list (list h))))
    )
  )
      #+END_SRC

      [2018-03-29 Thu 16:20:56] 现在背景透明化已经变成默认初始化设置，但是你可以[[file:../elements/custom-config/custom-example.el::;;%20(setq%20entropy/init-loop-alpha%20nil)%20;%20toggle%20transparent%20at%20start%20up%20of%20emacs][通过在custom.el中改
      变这个变量的值]]（ =entropy/init-loop-alpha= ）来改变初始化设值。
***** 段落宽度设定
      :PROPERTIES:
      :CUSTOM_ID: h-b9c49314-db47-460b-8e97-730fb1f43613
      :END:
      通常我们都是用一个长的行来作为段落的,由于文本编辑器有自动折行的功能,因此可以在一个窗口中把一
      个较长的行变成显示上的几行的文字那么口的大小进行了更改,那么显示效果就会变得不一样,例如如果放
      大窗口到全屏,那么原先可能折成4行,现在变成两行,这样的话就很难统一阅读观感.

      解决办法是不进行基于窗口大小的折叠效果,而是基于手动回车的方式换行,这样通过同一文本的每一行的
      字符串长度来解决观感一致性的问题.效果是这样的:

      [[file:../annex/img/screenshot_2018-02-04_00-14-00.png]]

      当然每一次手动操作比较麻烦,有没有自动化的方式来一次性把一个长行转换为一个固定行宽度的段落呢?
      答案就是函数 =fill-paragraph= , 我在这里设置的宽度是 *100* 个字符. =fill-paragraph= 操作的快
      捷键是 ~M-q~ .
***** 段落转换回行
      :PROPERTIES:
      :CUSTOM_ID: h-da98b80e-1ebd-4d97-be66-824ed4304dbb
      :END:
      有的时候我们并不需要进行所谓的 =fill-paragraph= ,尤其是对一个行做了该行为后想要恢复其行的特性,
      如果只是在关闭这个文件的之前我们可以用撤销操作的办法来恢复,但是如果关闭了这个文件,那么它的编辑
      历史就消失了,也就无从使用撤销操作了.那么这时候利用elisp来写一个恢复段落到行的函数就可以了:
      #+BEGIN_SRC emacs-lisp
(defun entropy/unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
	;; This would override `fill-column' if it's an integer.
	(emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))
(define-key global-map "\M-Q" 'unfill-paragraph)
      #+END_SRC

      默认我没有为这个函数绑定快捷键。你可以手动调用。
***** 插入当前时间函数
      :PROPERTIES:
      :CUSTOM_ID: h-a60908d9-5884-4ef2-b588-a2487bf22e54
      :END:
      如果我们经常用emacs做笔记的话,对于一个记录的时间记录是必要的,这有助于我们追踪回忆链.在org模式
      中有 =C-c .= ~org-time-stamp~ 来插入时间戳,但是在其他模式下并没有什么快捷键绑定插入时间戳,所
      以我从网上找了一个函数外加自己改成org的inactive格式的时间样式.

      只需要执行 =M-x now= 就可以插入一个时间戳,如下面的例子:
      #+BEGIN_EXAMPLE
      [2018-02-04 Sun 17:30:17]
      #+END_EXAMPLE

***** DONE [#A] 撤销树
      CLOSED: [2018-04-09 Mon 19:24]
      :PROPERTIES:
      :CUSTOM_ID: h-d848e388-044c-4033-afa5-2808ee5d6128
      :END:
      - State "DONE"       from "TODO"       [2018-04-09 Mon 19:24]
      - State "TODO"       from              [2018-04-09 Mon 19:22]
      emacs 的默认撤销操作是不可见历史的,这时候如果有了历史记录的功能,那么我们进行撤销操作,就可以使
      用上下左右来快速回退到某个历史记录中,就像ps中的历史记录快照.

      事例截图:

      [[file:../annex/img/screenshot_2018-02-04_18-45-19.png]]

      图中的s是 source的意思,x是终点,中间的是历史,具体的undotree更多功能请自行google.

      - [2018-04-02 Mon 19:44:44] 由于在 =entropy/center-text-clear= 开启后会导致undo-tree的功能性
        buffer没有足够空间与宿主buffer共存，因此我默认设定在 =entropy/center-text-clear= 模式下不启
        用undo-tree的功能。


      - [2018-04-09 Mon 19:23:35] 目前已完全实现恢复居中的功能，完成方法是通过重新定义
        =undo-tree-visualizer-quit= 函数来实现的。
***** 自动提升权限(编辑/浏览)
      :PROPERTIES:
      :CUSTOM_ID: h-3e471358-783f-4134-b51c-d8bd094effe3
      :END:
      在类似unix系统中使用sudo提升权限编辑文件是一个经常性的操作,但是每一次都是需要自己手动输入密码,很
      是麻烦.

      在emacs中使用sudo也是一样,它利用tramp来实现.因此 =auto-sudoedit= 这个日本人写的小插件就排上用
      场了,它的功能是在打开一个文件的时候自动探测是否需要提升权限来编辑,进而提示你输入root密码,然后
      在这个emacs session中就在内存中记住了密码以便重复使用该操作.

***** 剪贴板查看
      :PROPERTIES:
      :CUSTOM_ID: h-f8c89c59-5a57-4a9d-90c1-a4011710817f
      :END:
      使用 =browse-kill-ring= 插件可以查看一个emacs session 中的剪贴板历史记录.绑定的快捷键是 ~C-c
      M-k~ .
***** 回收站设置
      :PROPERTIES:
      :CUSTOM_ID: h-66f0daa6-f27e-4440-9315-469ec6d7f5dc
      :END:
      在emacs中默认删除文件就是真的删除了,为了防止误删文件,可以设置一个内置变量的值来实现移动到系统
      呢回收站的功能.
      #+BEGIN_SRC emacs-lisp
	(setq delete-by-moving-to-trash t)         ; Deleting files go to OS's trash folder
      #+END_SRC
***** windows 中的 =set-mark-command= 的快捷键绑定设置成了 ~C-·~ ，因为快捷键被输入法占用。
      :PROPERTIES:
      :CUSTOM_ID: h-63a3747a-4053-461e-9c2c-f203a2c53cd3
      :END:
      当然也有办法更改windows默认的输入法切换快捷键，具体可以google，但是我懒.
***** 文件及操作历史记录
      :PROPERTIES:
      :CUSTOM_ID: h-304e186a-e98d-414d-a81b-c4238cb9e73f
      :END:
      我默认开启了 =savehist= 和 =recentf= 两个emacs内置的插件包,前者是minibuffer的操作记录,后者是
      打开的文件的历史记录,有了这两个历史记录工具,配合ivy的搜索功能,就不太需要重复的打开操作了.
***** 书签设置
      :PROPERTIES:
      :CUSTOM_ID: h-a9bd8d88-5e94-42ec-a2c1-02e50397a07b
      :END:
      默认的emacs的书签是不会自动保存的,我设置为自动保存(每增加一个书签就保存书签文件).
***** 主模式刷新
      :PROPERTIES:
      :CUSTOM_ID: h-06978e24-5ce5-4a34-b5b0-05a15052c79c
      :END:
      这是一个很无奈的扩展功能，其主要对于web-mode而言，由于web-mode几乎囊括了所有的web编程方案，也
      就是说它把php, js, css等一系列web相关开发模式都整合进了一个major-mode中， 这导致了其bug的多。

      在这些bug中有一个很尴尬的bug,就是major-mode特性的消失：
      - 语义高亮消失
      - html css 等号自动添加双引号功能突然不起作用了。

        
      这两个bug我不知道现在的web-mode是否还有这个问题（我现在用的版本是2018年3月份的，目前4月末），
      但是它已经持续了很久，我也米有报bug，因为这个问题的reproduce几乎不可能确定步骤，因为它很诡异。

      于是我写了一个宏来刷新主模式，这样可以重新启用这些莫名其妙消失的功能。我把它绑定到了快捷键
      ‘F7’， 这个宏是可以在任何buffer中使用的，因为它能自动探测主模式。
**** ivy------>counsel [[file:../elements/main-config/init-ivy.el][init-ivy.el]]
     :PROPERTIES:
     :CUSTOM_ID: h-07750914-ed1e-4558-85e7-ffe8a860424e
     :END:
     ivy 是一个优化emacs的 =M-x= 命令的工具，其内置的counsel插件可以很方便的完成一些很方便的操作：

     - counsel-load-theme: \\
       这是我常用的切换主题的函数。通常我使用org-mode来写文档的时候使用github主题，写代码的时候使用
       其他深色主题，在entropy-emacs中已经内置了很多主题，你可以通过 =customize-themes= 来查看。

       其实我一天可能要切换很多次主题 😺 ，使用这个函数相当方便，它绑定的快捷键是： =C-c M-t=

     - counsel-git \\
       这是快速查找一个git仓库文件的函数。快捷键为 =C-c g=

     - counsel-recentf \\
       这是快速查找最近打开文件的函数。快捷键为 =C-c M-b= 与switch-buffer对应容易记住。


     还有很多counsel命令，你可以是使用 =M-x counsel-.*= 去寻找 :) 。

**** ui 设定 [[file:../elements/main-config/init-ui.el][init-ui.el]]
     :PROPERTIES:
     :CUSTOM_ID: h-c35152a6-9276-418d-9d17-9cef1bf1d427
     :END:
     我默认使用的是 =doom-one= 主题以后会提供api设置自定义主题.
     [2018-03-12 Mon 18:11:29] 已完成自定义主题配置变量 ~entropy/theme-options~
**** 工具设定 [[file:../elements/main-config/init-tools.el][init-tools.el]]
     :PROPERTIES:
     :CUSTOM_ID: h-1d2fe76c-ed19-44e7-8bf1-df3b1d8f8477
     :END:
     - youdao-dictionary\\
       有道词典查询单词示意或通过mark-set来进行段落翻译.
     - openwith\\
       设定dired中文件的默认打开软件。

       本配置默认使用外部打开的文件格式见如下代码中的后缀名：
       #+BEGIN_SRC emacs-lisp
(setq openwith-associations
	      (list
	       (list (openwith-make-extension-regexp
		      '("mpg" "mpeg" "mp3" "mp4"
			"avi" "wmv" "wav" "mov" "flv"
			"ogm" "ogg" "mkv" "m4a" "flac" "aac"))
		     ;;"mpv --audio-display=attachment"
		     '(file))

	       (list (openwith-make-extension-regexp
		      '("pdf" "djvu"))
		     ;;"evince"
		     '(file))))
       #+END_SRC

       日后会提供自定义配置方案。

       另外对于额外的配置操作，本配置还包括了：

       - 在dired中使用快捷键 =C-<RET>= 调用函数 =entropy/open-in-external-app= ,强制以外部程序打开文
         件。

       - 使用快捷键 ~C-=~ 在任意buffer中调用函数 =entropy/show-in-desktop= 以当前buffer对应
         =default-directory= 打开操作系统资源管理器。

     - vidual-regexp\\
       利用python的api做的正则匹配查询和替换,亮点是可以进行替换提示即:\\
       #+BEGIN_EXAMPLE
       <替换项目name>----><替换为...>
       #+END_EXAMPLE
     - firefox emacs编辑扩展\\
       利用firefox的 [[https://addons.mozilla.org/en-US/firefox/addon/ghosttext/][=Ghost-text=]] 扩展进行与emacs中 =atom-chrome= 服务的链接,可以在firefox中的输入
       文字区域使用emacs来编辑,但是搜索引擎的输入框是不可以的,只有类似论坛的回复,发帖是可以的.

       其中chrome扩展是: [[https://chrome.google.com/webstore/detail/atomic-chrome/lhaoghhllmiaaagaffababmkdllgfcmc][Atomic Chrome from the Chrome Store]]

     - treemacs \\
       树状列表显示当前文档坐在文件夹,方便于快速切换相同目录的文件

       [2018-03-11 Sun 20:04:00] [[https://github.com/Alexander-Miller/treemacs/issues/157][treemacs在windows下有一个bug]] 因此暂时取消treemacs的应用。

     - 网页搜索\\
       *search-web* :\\
       这个插件是用来定义搜索引擎,以便直接输入关键字使用eww打开查询结果.当然它可以定义每一个设置了
       的搜索引擎使用那一个浏览器打开,我设置baidu为使用内部浏览器,google使用外部,因为可能要使用
       vpn😏.

       #+BEGIN_QUOTE
       bug: 由于使用了 =search-web= 插件,我发现只要定义了它的内置搜索浏览器为eww后,在使用了
       search-web后都会使用eww打开所有链接,目前我修复了这个问题,是通过修改search-web的源码来实现的,
       但是由于shearch-web这个插件最后的更新在2015年,时光乍然,原主人已不知所踪,最无奈的是它并不是寄
       存在github上的,也就是说我无法提交bug和pull-requestion,这就导致我只能把它作为本地插件进行维护
       了.

       因此我把它放到了[[file:../elements/modified-elpa][modified-elpa]]这个文件夹当中,并同时从 =site-lisp= 中删除了它.
       #+END_QUOTE

     - emojify \\
       在emacs buffer中显示emoji 比如  😄.\\
       如果要输入emoji可以使用两个冒号作为前后缀,然后在当中输入相对应的标签就可以了:
       #+BEGIN_SRC
       :smile:
       #+END_SRC

     - discover-my-major\\

       这个插件方便查看mode的快捷键:

       - =M-x= disdiscover-my-mode : 查看当前buffer的minor-mode并选择其中一个mode查看绑定的快捷键快
         捷键: =C-h M-M=
       - =M-x= discover-my-major : 查看当前buffe主模式的快捷键 快捷键: =C-h M-m=

     - create scratch buffer scratch buffer \\
       一旦被杀掉后手动创建的它的话需要手动切换 =lisp-interaction-mode= 来启用它的debug功能,因此为了
       简便操作定义了这个函数:
       #+BEGIN_SRC emacs-lisp
	  (defun entropy/create-scratch-buffer ()
	    "Create a scratch buffer."
	    (interactive)
	    (switch-to-buffer (get-buffer-create "*scratch*"))
	    (lisp-interaction-mode))
       #+END_SRC
       - Misc tools\\
	 这个工具集是一些杂项工具,为了一些不太常用的功能而设立的,它们是:\\
	 - copyit\\
	   复制文件名和路劲等方便复制一些琐碎的量的插件.
	 - esup\\
	   emacs 启动时间测算工具.
       - coding revert\\
         我们常常需要把一个gbk编码的文件转换为utf-8-unix格式，所以我设定了一个功能函数
         =entropy/gbk2utf8=。

         另外如果只是想要转换行尾格式，即：dos转unix。那么使用这个函数 =entropy/dos2unix= 。
         #+BEGIN_QUOTE
         注意在windows中，这个两个函数是纯elisp实现，因此不要在windows中用它们转换过大的文件，不然
         emas会由于性能问题卡死。
         #+END_QUOTE

**** org-mode [[file:../elements/main-config/init-org.el][init-org.el]]
     :PROPERTIES:
     :CUSTOM_ID: h-3c45e750-173a-40c9-8431-9b509698bc62
     :END:
     - 设定一些基础性细节
     - 增加org-bullets美化org-mode的显示\\
       - [2018-04-02 Mon 20:14:56] 在windows中会造成闪屏，遂在windows中关闭它。
     - 增加org-download来快捷拖拽图片至org-mode buffer


     以及优化以上几个插件的使用

**** emms 配置 [[../../main-config/init-emms.el][init-emms.el]]
     :PROPERTIES:
     :CUSTOM_ID: h-06f0db0b-26a8-480b-a119-48e65e9c5450
     :END:

     #+BEGIN_QUOTE
     暂时在windows中禁止使用emms,因为在windwos平台上至今无法使用emms连接mpv。
     #+END_QUOTE

     1. 关于什么是emms,请上网查阅.
     2. 本配置中emms默认使用mpv作为默认播放器,在使用mpv播放音乐的时候为mpv配置无画面选项,配置方法是
        在mpv的配置文件中启用 ~audio-display=no~ .
*** 程序编辑相关包
    :PROPERTIES:
    :CUSTOM_ID: h-4e572e5b-189d-413c-adf4-26c996753fca
    :END:
**** 补全
     :PROPERTIES:
     :CUSTOM_ID: h-9f92a4a1-a33a-4480-aeff-86ced4020fa8
     :END:
     代码补全是在编辑代码的时候一个很重要但非必须的功能,但是对于一些初学者和庞大的代码编辑,为了减少
     我们脑容量限制带来的不变,代码补全就很是关键了.

     以下的两个包是我从很多优秀的emacs配置中发现的现在流行的补全插件.

***** company-mode [[file:../elements/main-config/init-company.el][init-company.el]]
      :PROPERTIES:
      :CUSTOM_ID: h-560db16e-b9ba-430d-8d22-f9e0667a8587
      :END:
      本配置默认使用company做为补全引擎,关于company的具体详情请查阅: [[http://company-mode.github.com/][company-mode]]

      默认我开启了全局company-mode补全模式,这样的好处是在不是编程模式的时候,可以匹配历史输入和系统路
      径.
***** yasnippet [[file:../elements/main-config/init-yas.el][init-yas.el]]
      :PROPERTIES:
      :CUSTOM_ID: h-fc500237-482c-498d-85e6-edfe9645117e
      :END:
      [[https://github.com/joaotavora/yasnippet#start-of-content][yasnippet]] 是一个可以手动编写补全缩写的补全引擎,除了之内的基本缩写片段外还有有很多贡献者上传的
      已经编写好的补全缩写,比如:
      [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]].

      同样的我也默认全局开启了yasnippet-mode,并且把yasnippet绑定进入company-backends来增强
      company-mode的补全内容.
**** 各语言主模式
     :PROPERTIES:
     :CUSTOM_ID: h-0cd50ab0-2588-4377-b4e0-b18936d78c8a
     :END:
***** 网站编程语言 [[file:../elements/main-config/init-web.el][init-web.el]]
      :PROPERTIES:
      :CUSTOM_ID: h-07ae54b1-5706-47b3-a65d-38cecd2a4486
      :END:
      这个模块是关于综合网站开发的编程技术的综合配置,我根据开发技术特点,分为了前段和后端两个模块.
****** 前端开发
       :PROPERTIES:
       :CUSTOM_ID: h-2236d793-4e7f-4648-94ca-c42c426741d5
       :END:
******* [[file:../elements/main-config/init-web.el::;;***%20html][html]]
        :PROPERTIES:
        :CUSTOM_ID: h-99d35624-17b9-42a2-89bf-7c3070ab570e
        :END:
	html的编辑我使用的是web-mode作为主模式来处理html格式的文件和增加编辑特性.

	另外使用[[https://github.com/smihica/emmet-mode][emmet-mode]]作为增强插件,具体内容我也没有深
	入剖析,只是用来作为价值添加.

	在编辑html文件的时候使用company-web作为增加的补全后端.
******* [[file:../elements/main-config/init-web.el::;;***%20CSS%20mode][css]]
        :PROPERTIES:
        :CUSTOM_ID: h-514e984f-d884-4f13-ac9a-c29403184157
        :END:
	css就是使用emacs内置的css-mode.
******* [[file:../elements/main-config/init-web.el::;;***%20js-mode][javascript]]
        :PROPERTIES:
        :CUSTOM_ID: h-441f0625-d09c-4c85-bdf7-f9441d842723
        :END:
	使用[[https://github.com/mooz/js2-mode][js2-mode]]作为默认的js格式文件主模式.
******* [[file:../elements/main-config/init-web.el::;;***%20JSON%20mode][json]]
        :PROPERTIES:
        :CUSTOM_ID: h-aeef6c8a-11dd-48d1-8e74-7d7694466838
        :END:
	使用[[https://github.com/joshwnj/json-mode][json-mode]]编辑json文件.
****** 后端开发
       :PROPERTIES:
       :CUSTOM_ID: h-5743ef05-8b48-49b9-ac73-da7e12732930
       :END:
******* [[file:../elements/main-config/init-web.el::;;***%20php][php]]
        :PROPERTIES:
        :CUSTOM_ID: h-cd6ee81a-fc67-4146-8182-1545d5745c0c
        :END:
	使用[[https://github.com/ejmr/php-mode][php-mode]]来处理php文件. 并且使用company-ac-php来进行补全。
        #+BEGIN_QUOTE
        1. 由于php文件常常是与html混合的，那么就需要一个能够同时支持php和html格式特性的主模式，在这
           里我选择`web-mode`,并且在web-mode中加入了php的yasnippet补全和company-ac-php的后端。（ps:
           以 '.php' 为扩展名的文件依然使用php-mode打开，因此常常需要从php-mode切换到web-mode。）

           由于company-ac-php是从ac-php转换过来，因此它有一个bug，即：一旦启用，无论使用本地
           company-backends还是全局都会覆盖掉其他的company后端（比如有用的company-dabbrev）,因此我在
           php-mode和web-mode中均设置了一个独立的快捷键来支持company-ac-php,=M-\=。


        2. 为了方便地在'php-mode'和‘web-mode’之间开始转换，我设定了一个快捷键 =<f5>= 。这个快捷键
           只有在'php-mode'和‘web-mode’中有效，是一个局部快捷键。


        3. 依据[[web-mode-bug][这条FAQ]]我设定了一个快捷键用来快速刷新`web-mode`，快捷键为 =<f1>= ，并且这是一个全局快
           捷键，并且可以刷新任意的主模式，因为这是一个宏： =entropy/major-mode-reload= 。
        #+END_QUOTE
***** C/C++ [[file:../elements/main-config/init-c.el][init-c.el]]
      :PROPERTIES:
      :CUSTOM_ID: h-7190d1ce-6af5-4457-a90c-5d054aa7821d
      :END:
***** python [[file:../elements/main-config/init-python.el][init-python.el]]
      :PROPERTIES:
      :CUSTOM_ID: h-532743c8-5ec7-4f7d-85b1-38bec05d49ab
      :END:
**** 高亮显示 [[file:../elements/main-config/init-highlight.el][init-highlight.el]]
     :PROPERTIES:
     :CUSTOM_ID: h-73ebb938-a3db-45fc-9634-ac725f643fd0
     :END:
     高亮显示主要是括号匹配和缩进提示线,这两个功能是可以让我们在阅读程序的时候得到更加直观的感受.

     当然还有页面内显示git-diff.这也是很常用的一个功能.

     默认我是没有启用 =init-highlight= 这个包的,因为对于大文件来说,由于emacs单线程的操作方式会导致
     buffer卡顿严重,因此这是一个可选包,启用方式是在 =custom.el= 中设定 ~entropy/my-add-highlight~值
     为 't' .

     当然以后我会想办法把highlight功能限定到小文件中,这样在大文件打开的时候默认是不启用的,这样就自动
     解决卡顿问题了.

     [2018-03-12 Mon 15:24:45] 现在已经可以用分块的方式启动 =init-highlight.el= 中的内容了，详情请查
     看 =init-defcusom.el= , 同样你也可以通过查看变量组 =entropy/hl= 来查看。

** 快捷键绑定汇总
   :PROPERTIES:
   :CUSTOM_ID: h-7c53d260-f085-4c83-91fe-4adda31db11b
   :END:
*** 基础快捷操作
    :PROPERTIES:
    :CUSTOM_ID: h-227388ee-d573-48f5-9e19-c4234d0a38d7
    :END:
**** 窗口操作
     :PROPERTIES:
     :CUSTOM_ID: h-3231e10e-3b37-4ef4-8dea-291ee6b623fc
     :END:
     - 大小改变: =C-<f10>=
     - 移动窗口: =C-c C-<direction key>=
     - 改变透明度: =<f6>=
     - 窗口居中:
       - 居中: =C-c M-up=
       - 取消居中: =C-c M-down=
     - search-web: =C-c w/W= 关键字/区域
     - 显示当前工作区编号: =C-c M-s=
*** 程序编辑快捷操作
    :PROPERTIES:
    :CUSTOM_ID: h-d08f8e75-b91a-4142-95e8-14c87e7f567a
    :END:
**** 补全快捷键
     :PROPERTIES:
     :CUSTOM_ID: h-0161317d-5ea9-43d8-b8a4-b18985715f2e
     :END:
     company补全快捷键 : =M-/=

     扩展补全快捷键： =M-\=
     #+BEGIN_COMMENT
     比如在php-mode中这个快捷键是用来调用company-ac-php的，在emacs-lisp-mode中是用来调用
     company-dabbrev-code的
     #+END_COMMENT
**** 各语言主模式快捷键
     :PROPERTIES:
     :CUSTOM_ID: h-5184d324-be5b-4f33-a3bf-ce3fd443fc02
     :END:
     目前处理web-mode中引用 ~browse-url-of-buffer~ 函数来打开当前buffer( =C-<f1>= )外暂无其他自定义
     设置.

     如需帮助请使用 ~discover-my-major~ 函数来查看当前主模式绑定的快捷键;使用 ~discover-my-mode~ 查
     看副模式的快捷键板顶.
** Emacs on windows
   :PROPERTIES:
   :CUSTOM_ID: h-a86d42a2-b724-4f55-ba01-b9ad2c9ced86
   :END:
   虽然emacs是一个自由软件，但是其是为 GNU/Linux 和其他类UNIX系统而生的，又由于教主对于windows是十分
   排斥的，而且教主又是emacs的作者,对emacs windwos port 的诞生只是一种劝导，所以emacs在windows上的光
   芒要弱一些，但是并不是很逊。

   由于我需要在windows上进行工作，那么在windows上使用emacs就是我必须的要求。

   在windows上使用emacs需要克服以下问题：

   - 搭建windows下的GNU/Linux工具集。
   - GNU/Linux 工具集与emacs的协同设置。


   *在本配置中我定义了以下设置:*

   #+BEGIN_QUOTE
   我把它们集合在一个组合中 [[file:../elements/main-config/init-defcustom.el::;;%20**%20specific%20for%20windows][=specific windows=]],你可以查阅用户配置文件(custom-example.el)中的[[file:../elements/custom-config/custom-example.el::;;%20**%20windows%20specific%20setting][widnwos specific settiing 模块]] 。
   #+END_QUOTE

   - <<1>>wsl 设置

     wsl取名来自于win10的WSL(widnows subsystem linux),由于win10的WSL并不能被windows port 的emacs所调
     用系统环境（也许只是我不会而已），再者它不能够被随身携带（不便携，我的主张是尽可能的是软件
     portable化），因此我“重（胡）新（说）定（八）义（道）”了我的wsl。

     我的wsl使用的是 [[https://github.com/git-for-windows/git-sdk-64][=git-for-windows-sdk=]] 来作为wsl的GNU工具集，理由么如下：
     #+BEGIN_QUOTE
     1. 我的首选是msys2这个widnows下的GNU工具集，但是它有一个弊端，就是他的emulate terminal是无法被
        emacs的 ~w32-shell-execute~ 所完全调用的，调用后是一个cmd窗口，并没有真正的启动它的bash。而
        我至今唯一找到的可以克服这个缺点的emulate terminal for windows 就是git-bash.exe，只可惜它只
        是提供了很少的bash命令，并没有充分的体现wsl的特性。

	因此我开始幻想是否有一个套装，把git-bash和msys2结合起来的集合。于是我照常开始了google之旅,在
        stackoverflow的这一篇[[https://stackoverflow.com/questions/32712133/package-management-in-git-for-windows][FAQ]]中我找到了答案----->使用'git-for-windows-sdk'。


     2. 对于msys2有这样的问题，它的开发包的安装需要一定的对于msys2的了解，我寻求的是现成的开发环境，
        这个思想就是想要找一个msys2的现成的已具备widnows上的都GNU的开发环境的发行版。

	正好git-for-windows-sdk上为了在windows上实现git的基于msys2的一个套装，完美解决我的基本开发环
        境的需求。但是对于其他特殊开发包（git-for-windows不需要的）仍然需要自己手动安装，显然因为它
        是基于msys2的，当然兼容msys2的包管理，实际上用的包管理源都是一样的。这样一来我就可以完美用
        pacman安装其他自己需要的包了。
     #+END_QUOTE

     *变量设置：*
     - entropy/wsl-enable :

       它定义了是否启用wsl。
     - entropy/wsl-apps

       它是设置你的gnu工具集的路径，比如我的路径是：=c:/git-sdk/usr/bin/=
   - wsl-terminal 设置wsl-terminal 就是设置的emulate terminal,依据我衣裳的关于wsl的叙述必然使用
     git-bash.exe作为windows下的emulate-termiunal。

     *变量设置：*
     - entropy/wsl-terminal-enable ： 使用启用它
     - entropy/wsl-terminal ： 设置路径，比如我的是 =c:/git-sdk/git-bash.exe=

*** portale设置
    :PROPERTIES:
    :CUSTOM_ID: h-bc77e002-325d-4929-b6a6-eafa1fa297af
    :END:
    比如我，这种不喜欢widnows有不得不在windwos上工作的人，当然不把自己的工作环境在windows上一次性布
    置（只能在当前系统环境作业），因为既然用了widnows，那么我就是为了生存，生存在本质上需要不断的迁
    移，就好比我不能只是在自己家里的电脑上工作，在公司也需要使用我自己的一套操作环境配置。因此我需要
    一套可以移动的配置，简称portable配置。

    这种portable配置上以移动硬盘位唯一存储和路径介质，这样一来我就可以随声带着移动硬盘在任何windwos7
    以及以上的电脑上工作（这得益于windwos的统一天下---：在中国）。

**** 首先就是关于emacs的自定义home目录设置
     :PROPERTIES:
     :CUSTOM_ID: h-f8afff4e-a8bb-4e3d-bc18-433902bb960f
     :END:

     最近由于我想要在windows平台下把所有常用软件迁移到 =portableapps= 。这就给我提出了一个新的问题，那
     就是关于如何把emacs的自定义配置文件的home位置环境迁移倒任意我想要迁移到的位置。

     目前我在windows平台下使用的emacs版本是 '25.3.1' , 对于这个版本的emacs有这样一个变量：\\
     ~data-directory~

     这个变量的定义是这样的：\\
     #+BEGIN_QUOTE
     Documentation:\\
     Directory of machine-independent files that come with GNU Emacs.\\
     These are files intended for Emacs to use while it runs.

     翻译：\\
     随同GNU Emacs发布的独立于计算机的文件的目录。\\
     这些文件用来给emacs启动时使用。
     #+END_QUOTE

     这就是说这个变量是独立于计算机系统环境变量的，那么这个变量的值是一定的(被emacs编译时定死的)，在这
     个版本的emacs中它的值是：\\
     =path-to-emacs/share/emacs/25.3/etc/=

     现在我们拥有这么一个不变的变量，那就是相对常量了，那么我们就可以以它的路径值作为一个恒定相对坐标，
     然后利用这个相对坐标定位出一个相对位置，并且把这样一个位置定位为我们的便携式 =Home= 目录。

     从上面的阐述我们可以看出 ~data-directory~ 是一个给定的独立的相对路径，它的独立性质是无论你把emacs
     程序包放在任意位置它的尾值是一定的，也就是 =/share/emacs/25.3/etc/= ，而唯一不同的就是头值，也就是
     程序包的存放位置。

     那么我们就可以把 =path-to-emacs= 当作一个便携设备的根目录,因为在wondows中这个值一定是以驱动器开头
     的，比如 =e:/software/emacs-25.3.1= 这个值，我们就可以把 =e:/= 当作根目录然后在其下面建立一个名为
     =home= 的目录作为我们的便携式home目录。

     那么我们要做的就是自动判断这个 =path-to-emacs= 的值是什么，由于我们的移动存储设备的盘符在不同的计
     算机中可能是不一样的，我们不能每一次都手动定义这个量，因此我们十分需要用一种自动化的方式来得到这个
     量的值。

     由于前面提到的 ~data-directory~ 这量是一个相对常量，并且是伴随着emacs而产生的，也就是说在不同机器
     环境中这个值的相对性（也就是头值）是可以在emacs启动时自动获得的，因此接下来我们只需要对这个量的值
     进行删减就可以得到我们需要的便携式根目录了，我们使用一下程序代码获得它：
     #+BEGIN_SRC emacs-lisp
     (defvar usb-drive-letter (substring data-directory 0 -43))
     #+END_SRC

     这段代码中使用了一个函数 =substring= ,这个函数可以对一个字符串进行截断，它有三个参数：
     - 字符串
     - 截断位置
     - 截断长度


     这里我设置的截断位置是 =0= 也就是一个字符串最右边的位置，截断长度是43就是正好是删除整个
     =path-to-emacs/share/emacs/25.3/etc/= 的长度，通过这样的截断最后 =substring= 这个函数的返回值就正
     好是你的emacs程序包所在本机的磁盘位置，比如在我这里得到的值就是 =e:/software/= 。


     接下来的阶段就是通过加长这个返回值来得到你想要在便携驱动器上的位置，代码如下：
     #+BEGIN_SRC emacs-lisp
     (defvar usb-home-dir (concat usb-drive-letter "home/"))
     #+END_SRC
     返回结果是 =e:/software/home/= 。这种加长的操作其实就是拼合两个字符串操作，我想你已经注意到了这个
     函数 =concat= 。

     那么现在我们就自动化的得到了我们想要的便携式根目录的位置，注意，由于我们是通过截断
     ~data-directory~ 这个变量来获得移动驱动器盘符的，那么就不需要担心换机器所带来的不确定盘符的问题，
     因为就像先前说的那样，这是一个独立于计算机环境的相对常量，emacs会自动获取。

     最后我们要做的就是设定emacs的HOME变量的取值为我们的 =usb-home-dir= 了。代码如下：
     #+BEGIN_SRC emacs-lisp
     (setenv "HOME" usb-home-dir)
     #+END_SRC

     其实我知道你读到现在你唯一想知道的也许就是这段代码，因为只要知道了这段代码，你就可以为你的emacs设
     定任意位置的 =HOME= 位置了。但是我说这么多的原因是在兴奋过后也许你还需要想在不同的机器上自动设定你
     的相对绝对位置 :) ，因此我才会引入 =data-directory= 这个量 。

     以上就是这一问题的解决办法，你需要把上面的代码写到一个独立的文件中，并且把这个文件放到emacs程序包
     中的一个位置中。这个文件的名称是一定的，在25.3.1版本的windows平台上的emacs它是
     =path-to-emacs/share/emacs/25.3/site-lisp/site-start.el=

     整个文件是这样的：\\
     =site-start.el=
     #+BEGIN_SRC emacs-lisp
       (defvar usb-drive-letter (substring data-directory 0 -52))
       ;;(defvar usb-home-dir (concat usb-drive-letter "home/"))
       (defvar usb-home-dir (concat usb-drive-letter "Documents/mygit/"))
       (setenv "HOME" usb-home-dir)
     #+END_SRC


     最后你就可以把你的emacs的配置文件放到 你设定的 =home/= 目录中了。如果是使用本配置的化那就直接从
     github上克隆本配置到那里并改名为 =.emacs.d= 就可以了。

**** 再来就是关于git的portable化
     :PROPERTIES:
     :CUSTOM_ID: h-3dc09646-5000-4042-af2b-d3975f462e40
     :END:

     [[1][在wsl的配置说明中]]我推荐使用git-for-windows-sdk,那么本来它就包括git，所以你只需要把它的git.exe的
     路径配置到emacs中就可以了。
     #+BEGIN_QUOTE
     注意配置git-portable主要是为了magit的ssh passphrase可正常使用，在windows中无论是git-for-windows
     还是git-for-windows-sdk都是需要设置为它们根目录中的cmd文件夹git.exe设为magit的git程式，因为cmd
     中的git会自动用ssh的图形接口程序来提示输入密码，这一点是通过magit中的ssh-agency来达到的。

     因此git-portable是专门为magit设置的，你需要设置到上一段提到的cmd目录中，比如 =c:/git-portable/cmd/=
     #+END_QUOTE

     在本配置中我引入了以下变量：
     =entropy/git-portale= 和 =entropy/git-portable-path= ,前者是启用变量，后者是路径设置一变量。

     [[*首先就是关于emacs的自定义home目录设置][在便携式emacs home目录设置说明中]]，我引入了变量 =data-directory= ,同样你可以使用这个相对路径变量
     来设置你的 =git-portale= 的值,以便达到真正的portable画面。


     值得注意的是在windows wsl中的bash在emacs的shell中是调用path次序是以 =/usr/bin= 为第一顺位的，因
     此当你在emacs的shell中使用git的时候其实是使用的 =/usr/bin/= 中的git，这一点其实是可以通过使用
     bashrc的alist来改回统一的,例如：
     #+BEGIN_SRC bash
     alias git="/cmd/git.exe"
     #+END_SRC

***** 关于counsel-git中文乱码的问题
      :PROPERTIES:
      :CUSTOM_ID: h-dd22acc5-0721-4df9-b476-fdb6db0e29ba
      :END:

      counsel-git在windows中是支持中文检索的，前提是你需要在你的home path中的.gitconfig中的core类目
      中添加一项：
      #+BEGIN_EXAMPLE
      quotepath = false
      #+END_EXAMPLE

      并且设置你的LANG环境为 =zh_CN.UTF-8= , 关于设置LANG ，我提供了一个变量设置:

      - entropy/win-lang-enable
      - entropy/win-lang-set

      同样设置正确的LANG环境编码后，pt可以正常显示中文。
***** 关于git-bash的portable化
      :PROPERTIES:
      :CUSTOM_ID: h-2d96c2c0-bba3-49ce-acf3-075474fe55b2
      :END:
      #+BEGIN_QUOTE
      由于git-for-windows的bash环境是基于Msys2的，因此一下的说明和配置同样适用于Msys2。所以特在此说明不
      再赘述。
      #+END_QUOTE

      在使用git-for-windows的过程中，会想要使得git-bash的基本环境设置脱离主机的限制，也就是portable化。

      默认git-bash有这两个文件是关于portable配置的：

      - =/etc/minttyrc= \\
	这个文件使用来git-bash主控界面和交互操作的设置文件。

	这个文件起初并不存在，因为默认这个文件的初始保存方式是寄宿于你的windows宿主计算机的账户根目录，
	例如：
	#+BEGIN_EXAMPLE
	c:/User/Your-account-name/Appdata/Roaming/.minttyrc
	#+END_EXAMPLE

	因此你需要在第二次打开git-bash之前把这个文件已非隐藏文件的方式保存到 =Path-to-git/etc/= 中。这
	样你每一次启动git-bash后就会默认使用这个配置文件，因此在不同的宿主机上你就可以使用同样的
	git-bash的interface设置，而不用每次都临时设置一遍。
      - =/etc/profile= \\
	profile文件可以在其中添加home目录的基于相对于git-bash环境的根目录的路径，例如： =/home= 。同样
	的git-bash默认是把home目录的路径认为是例如：
	#+BEGIN_EXAMPLE
	c:/User/Your-account-name/Appdata/Roaming/
	#+END_EXAMPLE

	只有当你在其中写入home目录的路径值时候，git-bash才会以你的设置为基准。

	例如这是我的关于home目录的设置代码：
	#+BEGIN_SRC bash
   # To the extent possible under law, the author(s) have dedicated all
   # copyright and related and neighboring rights to this software to the
   # public domain worldwide. This software is distributed without any warranty.
   # You should have received a copy of the CC0 Public Domain Dedication along
   # with this software.
   # If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.

   HOME=/home/user01/

   # System-wide profile file

   # Some resources...
	#+END_SRC
	这样设置的结果就是让home目录始终在git-for-windows的根目录下的home文件夹内，无论在任何宿主机。

	有了home目录的portable化，那么我们就可以把在linux上的个人配置主目录里的配置文件迁移到这里，例如
	=.bashrc= =.ssh/= =.gnupg/= 等等。
      - =/etc/ssh/ssh_config= && =ssh_known_hosts= \\
	- =ssh_config= : =ssh_config= 对于我来说最关键的就是可以制定使用的个人ssh配置文件目录。\\
	  在该配置文件中只要取消注释一下几行：
	  #+BEGIN_SRC bash
	    # IdentityFile /home/.ssh/id_rsa
	    # IdentityFile /home/.ssh/id_dsa
	    # IdentityFile /home/.ssh/id_ecdsa
	    # IdentityFile /home/.ssh/id_ed25519
	  #+END_SRC
	  就可以使用位于在/home/目录中的个人ssh配置文件了。
	  #+BEGIN_QUOTE
	  别忘了添加用户目录，比如 =/home/user01=
	  #+END_QUOTE
	- =ssh_known_hosts= : 这个文件对于我来说最关键的就是让 =knnown_hosts= 保存在自己配置的home目
          录中。\\
	  值得注意的是这个文件本来是不存在于 =/etc/ssh/= 目录中的。需要自己手动创建（或者复制自动生
          成的）。

**** 最后就是关于其他工具的portable化
     :PROPERTIES:
     :CUSTOM_ID: h-c9ab1e84-6424-4896-bdf9-bbaa4d177fe6
     :END:
***** texlive
      :PROPERTIES:
      :CUSTOM_ID: h-0e784cab-8a60-4da6-acb4-71a5425e0396
      :END:
      用org-mode来记录数学笔记是一件十分愉快的事情，那么为emacs配置便携的texlive环境。

      设置一下变量：
      - =entropy/win-portable-texlive-enable=
      - =entropy/win-portable-texlive-path=

***** php
      :PROPERTIES:
      :CUSTOM_ID: h-08aa9291-f256-444c-97a7-2f07d07d0fae
      :END:
      如果你需要使用ac-php(company-php)那么会需要后台的php服务。本配置提供以下变量：
      - entropy/win-portable-php-enable
      - entropy/win-portable-php-path
***** python pip
      :PROPERTIES:
      :CUSTOM_ID: h-ef11717f-9015-4092-a018-12246a403073
      :END:
      python pip 是一个python的一个工具，对于本仓库主要是用来下载anaconda-mode使用，也因此用户无需
      设置它，但是为了有些需要在shell中使用pip的朋友，我还是贴出它的变量：

      - entropy/win-portable-pip-enable
      - entropy/win-portable-pip-path

        
      同样的我提供了比较关于portble-python的变量设置：
      - entropy/win-portable-python-enable
      - entropy/win-portable-python-path

        
      注意不要使用msys2或git-for-windows-sdk中的python，因为它们中的python是分为两个版本的，一个是
      mingw版本一个是msys2版本，但是pip只有mingw版本，当你设置pip的路径后，会覆盖usr/bin的路径，导致
      其他的一些PATH设置被滞后，导致不可用，比如：
      #+BEGIN_COMMENT
      当我要使用 =sqlite3= 的为[[https://github.com/kuanyui/moedict.el][moedict]]的时候（此时sql的路径是你的wsl中的路径即：/usr/bin）但是但你设置了
      mingw的pip后，由于我在path设置中是让pip领先于wsl的，因此你下次使用modict的时候会提示错误，因为
      mingw下也有一个版本的sqlite3，但是这个版本的它是不能被moedict使用的。
      #+END_COMMENT

      再来不管是mingw还是msys2的python都无法正确被anaconda-mode调用，但是使用mingw的python可以通过：
      #+BEGIN_SRC bash
      pip install --upgrade jedi json-rpc service_factory      
      #+END_SRC
      https://github.com/syl20bnr/spacemacs/issues/7422
      来解决问题。
      
      但是这个就是不调用anaconda-mode自己下载的python依赖库，而是使用它自己下载的依赖，等于不通过
      emacs的anaconda-mode插件下载，自己下载。这种修复方式，我不推荐。
      #+BEGIN_COMMENT
      上面的下载的依赖，原本已经通过emacs的anaconda-mode下载到
      =your-emacs-config-path/anaconda-mode/= (在本配置中是 =elements/anaconda-mode/=)。你可以去看看。
      #+END_COMMENT
      
      因此我推荐所有要使用mingw目录下的软件，都是有windows版本的官方包，在这里我推荐使用python的
      [[https://github.com/winpython/winpython][WinPython]]版本，它是便携式的。
      
***** rg ag pt for windos
      :PROPERTIES:
      :CUSTOM_ID: h-57417162-bda0-4166-b887-ac414651a019
      :END:

      rg ag pt 它们是对于grep的升级搜索软件，可以快速的检索一个project（通常是一个git目录）的关键字
      内容。

      可惜的是由于它们都基于utf-8编码方式，但是在windwos下utf-8只是备胎，因此它们在windows下和emacs
      配合无法发挥一同在Linux和mac中的威力（对于万国码的支持）。

      但是平时这个功能我都是基于代码库的检索，还好都是英文，因此本配置也支持对它们的环境变量的设置：
      - rg
	- =entropy/win-portable-rg-enable=
	- =entropy/win-portable-rg-path=
      - ag
	- =entropy/win-portable-ag-enable=
	- =entropy/win-portable-ag-path=
      - pt
	- =entropy/win-portable-pt-enable=
	- =entropy/win-portable-pt-path=


      对于rg ag 和pt的可执行文件我都放在了本配置仓库中的 =/elements/bin/= 中。你可以直接使用。

***** cmder 使用
      :PROPERTIES:
      :CUSTOM_ID: h-61a91f22-203a-42ef-ba6f-e6ebb9d3ecec
      :END:
      cmder是一个windwos的cmd的增强形模拟器，这个模拟器在我对与emacs的协同中有两个十分重要的特点：
      - 可以不用手动开启管理员权限
      - 可以内置自己的可执行文件到cmder的path中


      第一个特点可以方便的运行一些需要管理员权限的命令，第二个就可以使用在emacs中pt无法完美混搜
      cjk&ascii的特点。

      我启用了两个用户配置变量来协同emacs和cmder：
      - entropy/Cmder-enable
      - entropy/Cmder-path
	#+BEGIN_QUOTE
	注意cmder-path必须包含可执行文件的名字，譬如： =c:/cmder/Cmder.exe=
	#+END_QUOTE
****** 开启cmder启动及使用管理员权限
       :PROPERTIES:
       :CUSTOM_ID: h-fe7b0727-2a45-4b84-adc2-2e3d0b51fdec
       :END:

       如下图：

       [[file:../annex/img/Snipaste_2018-03-10_19-11-24_2018-03-10_19-11-47.png]]

       注意途中的 =Specofoed ma,ed task= 中的选项选择。
****** 取消开启初始化git状态查看功能
       :PROPERTIES:
       :CUSTOM_ID: h-b7c4a6de-a591-480f-8a46-a692fcc03fa2
       :END:
       由于cmder的git集成默认会让你进入一个git仓库时候自动检测仓库状态，这有点像zsh的默认配置。一般
       小仓库是很方便的，但是一旦进入一个比较大的目录的时候，问题就比较尴尬，因为需要检测很久，但是
       我们有时候却不需要检测这个目录。

       *解决方法：* \\
       禁止初始化 =git status= 检测,通过编辑 =cmder-path/vendor/init.bat=
       #+BEGIN_SRC bat
	 :: check if git is in path...
	 setlocal enabledelayedexpansion
	 for /F "delims=" %%F in ('where git.exe 2^>nul') do @(
	     pushd %%~dpF
	     cd ..
	     set "test_dir=!CD!"
	     popd
	     if exist "!test_dir!\cmd\git.exe" (
		 set "GIT_INSTALL_ROOT=!test_dir!"
		 set test_dir=
		 goto :FOUND_GIT
	     ) else (
		 echo Found old git version in "!test_dir!", but not using...
		 set test_dir=
	     )
	 )
       #+END_SRC
       注释掉如上代码，cmder就会不把git添加进它自己的环境变量中，这个方法会让cmder无法使用内置的
       portable-git，但是其他msys程序仍然能后使用，因为两者的路径不一样。

       这是一个不完美的方法，因为我不懂widnwos的bat，所以只能用这种笨办法，如果你知道怎么做，诚恳希
       望分享给我。

       [2018-04-10 Tue 16:46:25] 关于这个问题在cmder的github上有相关解决办法，我尝试了一下，目前可行。

       先贴issue地址：
       1. https://github.com/cmderdev/cmder/issues/763
       2. https://github.com/cmderdev/cmder/issues/447#issuecomment-244149494


       其中第一个是为我找到第二个链接的引导，可以看到在第二个中链接的标题中引用了 ‘lag with git' 这
       样的描述，可见这就是我们需要的FAQ页面。

       它给出了两个解决办法，均是修改 =vendor/clink.lua= 这个lua文件中的程式。由于很容易看懂，因此我
       只把它们的修改方法贴在下面，不做阐述了。

       - 方案1：

         After some searching, I've been able to remove git integration in the prompt, resulting in no lag when inputting commands in a git repo! The following modifications must be done to your cmder/vender/clink.lua file:

         On line 41, remove {git}{hg} to prevent git/mercurial branch from being printed in your prompt:
         #+BEGIN_EXAMPLE
         local cmder_prompt = "\x1b[1;32;40m{cwd}\n\x1b[1;30;40m{lamb} \x1b[0m"
         #+END_EXAMPLE

         Comment out lines 266-267 to prevent git and mercurial plugins from running every time you press enter:
         #+BEGIN_EXAMPLE
         --clink.prompt.register_filter(hg_prompt_filter, 50)
         --clink.prompt.register_filter(git_prompt_filter, 50)
         #+END_EXAMPLE

         As a note, you may want to back up this clink.lua file somewhere, in case it gets overridden after a cmder update.
       - 方案2：

         In the traditional cmd with clink, there are two git look-ups run in clink.lua to refresh the prompt:

         #+BEGIN_EXAMPLE
         get_git_branch - fast, reads .git/HEAD
         get_git_status - slow, git status which is used to decide about dirty/clean colourisation. In the whole git repo of Boost, this one takes annoyingly long time.
         #+END_EXAMPLE

         So, instead of disabling git information in the prompt completely, some may prefer to just get rid of the detailed/coloured status, keeping the current branch info:

         #+BEGIN_EXAMPLE
            λ diff -Nua c:\apps\cmder_mini\vendor\clink.lua.original c:\apps\cmder_mini\vendor\clink.lua

            --- c:\apps\cmder_mini\vendor\clink.lua.original        2018-04-09 09:54:20.468732700 +0200

            +++ c:\apps\cmder_mini\vendor\clink.lua 2018-04-10 08:39:57.809013700 +0200

            @@ -263,11 +263,12 @@
                     local color
                     if branch then
                         -- Has branch => therefore it is a git folder, now figure out status
            -            if get_git_status() then
            -                color = colors.clean
            -            else
            -                color = colors.dirty
            -            end
            +            -- XXX: Disable git status due to lag in large repo
            +            -- if get_git_status() then
            +                 color = colors.clean
            +            -- else
            +            --     color = colors.dirty
            +            -- end

                         clink.prompt.value = string.gsub(clink.prompt.value, "{git}", color.."("..branch..")")
                         return false

         #+END_EXAMPLE

***** DONE [#A] nodejs portable化
      CLOSED: [2018-04-14 Sat 00:20]
      :PROPERTIES:
      :CUSTOM_ID: h-2a15f33d-397c-4ccf-84e7-8a0eb7a1ab5a
      :END:
      - State "TODO"       from              [2018-04-09 Mon 19:25]
        
        
      对于web开发者来说，nodejs是比不可少的依赖库，同样我提供了相关的Path变量：
      - entropy/win-portable-nodejs-enable
      - entropy/win-portable-nodejs-path
        
** DONE [#A] 字体设置
   CLOSED: [2018-04-12 Thu 19:27]
   :PROPERTIES:
   :CUSTOM_ID: h-95f15e3d-009f-4000-9aae-c614136dccf4
   :END:
   - State "DONE"       from "TODO"       [2018-04-12 Thu 19:27]
   - State "TODO"       from              [2018-04-02 Mon 20:55]
      
      
   _注意：如果你使用终端中的emacs，你完全可以不看这一章节。_


   --------------------  
   *字符集：*

   - 西文字体 \\
     西文字体包括纯Ascii字符和latin（拉丁）字符扩展，通常我们再编写程序时，纯Ascii够了，但是对于像
     =org-mode= 或者像词典界面或 =eww buffer= 通常会带有latin扩展字符，这时候，如果你的字体只包含了
     纯ASCII字符，那么你将会得到乱码。

   - cjk字体\\
     cjk字体，对于我们中国人，主要使用中文简体和繁体，大多是字体都是完备支持的。

   --------------------  
   *emacs中的字体编排方式：*

   emacs中字体是按编码来划分的，像包括ASCII在内的西文统一划分到latin组中，对于cjk则有：
   - han 组
   - cjk-misc 组
   - bopomofo 组 （尝试读一下，你就明白它是什么了 :smile: ）
   - symbol 组
   - kana 组（针对韩文）

      
   在emacs中设置字体是对上述的各个组别的字体设置，每个组别包含了一组编码set，利用查看变量
   =charset-script-alist= 我们可以查看到各个组别的编码集合,如下：
   #+BEGIN_EXAMPLE
     charset-script-alist is a variable defined in ‘fontset.el’.
     Its value is shown below.

     Documentation:
     Alist of charsets vs the corresponding most appropriate scripts.

     This alist is used by the function ‘create-fontset-from-fontset-spec’
     to map charsets to scripts.

     Value: ((ascii . latin)
      (latin-iso8859-1 . latin)
      (latin-iso8859-2 . latin)
      (latin-iso8859-3 . latin)
      (latin-iso8859-4 . latin)
      (latin-iso8859-9 . latin)
      (latin-iso8859-10 . latin)
      (latin-iso8859-13 . latin)
      (latin-iso8859-14 . latin)
      (latin-iso8859-15 . latin)
      (latin-iso8859-16 . latin)
      (latin-jisx0201 . latin)
      (thai-tis620 . thai)
      (cyrillic-iso8859-5 . cyrillic)
      (arabic-iso8859-6 . arabic)
      (greek-iso8859-7 . latin)
      (hebrew-iso8859-8 . latin)
      (katakana-jisx0201 . kana)
      (chinese-gb2312 . han)
      (chinese-gbk . han)
      (gb18030-2-byte . han)
      (gb18030-4-byte-bmp . han)
      (gb18030-4-byte-ext-1 . han)
      (gb18030-4-byte-ext-2 . han)
      (gb18030-4-byte-smp . han)
      (chinese-big5-1 . han)
      (chinese-big5-2 . han)
      (chinese-cns11643-1 . han)
      (chinese-cns11643-2 . han)
      (chinese-cns11643-3 . han)
      (chinese-cns11643-4 . han)
      (chinese-cns11643-5 . han)
      (chinese-cns11643-6 . han)
      (chinese-cns11643-7 . han)
      (japanese-jisx0208 . han)
      (japanese-jisx0208-1978 . han)
      (japanese-jisx0212 . han)
      (japanese-jisx0213-1 . han)
      (japanese-jisx0213-2 . han)
      (korean-ksc5601 . hangul)
      (chinese-sisheng . bopomofo)
      (vietnamese-viscii-lower . latin)
      (vietnamese-viscii-upper . latin)
      (arabic-digit . arabic)
      (arabic-1-column . arabic)
      (arabic-2-column . arabic)
      (indian-is13194 . devanagari)
      (indian-glyph . devanagari)
      (indian-1-column . devanagari)
      (indian-2-column . devanagari)
      (tibetan-1-column . tibetan))

     [back]

   #+END_EXAMPLE

   在上述的概览给予中，我们把 ='(kana han symbol cjk-misc bopomofo)= 这个集合成为我们亚洲语言组别，
   那么如果我们需要设置亚洲语言的字体的话（仅仅包括：中，日，韩），就可以用一个循环体程式来统一设置
   它们，如下：
   #+BEGIN_SRC emacs-lisp
       (dolist (charset '(kana han symbol cjk-misc bopomofo))
         (set-fontset-font (frame-parameter nil 'font)
                           charset
                           ;; (font-spec :family "Microsoft Yahei" ))
                           (font-spec :family "Droid Sans"))
         (setq face-font-rescale-alist '(("Droid Sans" . 1.2))))
   #+END_SRC

   这里的 =Driod Sans= 是一个我从网上下载的娃娃字体，当然我并不喜欢 😏, 只是为了能够方便区分全角和
   半角符号，比如：

   [[file:../annex/img/Snipaste_2018-04-12_18-28-47_2018-04-12_18-29-06.png]]
   --------------------
   *西文字体设置*

   上文提到了拉丁扩展的问题，那么如果你需要的话，就必须找一个兼容所有西文字符的等宽字体（等宽是为了
   方便阅读代码），在windows中像 =Dejavu Mono= , =Monoca= 都不支持注音符号。由于我要使用中文词典软
   件来学习古汉语（使用 [[https://github.com/kuanyui/moedict.el][=萌典=]] ），那么就会需要正确的显示注音符号，例如：
   #+BEGIN_EXAMPLE

     是 ㄕˋ shì shr̀

      [名]

         對、正確。
             如：「自以為是」、「積非成是」。

         事情。
             如：「國是」。

         姓。如唐代有是光。

      [動]

         贊成、稱讚。
             如：「是古非今」、「深是其言」。

         表示肯定判斷的話。
             如：「我是學生」、「他是外國人」、「老人與海的作者是海明威。」

         表示存在的事實。
             如：「全身是傷」、「滿身是汗」。

         對命令的應答之詞。
             如：「是，我這就去。」、「是，我馬上就來。」

      [形]

         這。指示形容詞。
             如：「是人」、「是日」。
             論語．學而：「夫子至於是邦也，必聞其政。」

      [代]

         此。指示代名詞。
             孟子．梁惠王上：「是乃仁術也，見牛未見羊也。」

      [連]

         於是，表示前後相關。
             書經．禹貢：「桑土既蠶，是降丘宅土。」
             管子．心術下：「心安是國安也；心治是國治也。」

      [助]

         用於句中，使賓語提前。
             如：「惟命是從」、「惟利是圖」、「惟你是問」。
   #+END_EXAMPLE

   我只找到了一个系列的支持注音符号的西文编程字体：[[https://www.google.com/get/noto/][Goole Noto Sans Mono Light]], 这也是我正在使用的一个的系
   列。

   设置方法：
   #+BEGIN_SRC emacs-lisp
       (set-face-attribute
        'default nil :font "Noto Sans Mono Light 11")
   #+END_SRC
    
   /解释一下：/ 这里为什么没有用 =set-fontset-font= 函数来单独设定latin分组：\\
   #+BEGIN_QUOTE
   事实上同样可以这样使用，但因为emacs的界面是英文的，我们设置西文字体的同时通常也是需要给界面字体
   设置成同样的字体。

   你同样可以使使用这样的函数来做，只不过并不是整个frame。（这里的实质区别我还有待考证，因为
   eww-buffer好像无论怎样设置都是一个字体，所以请保持怀疑态度）

   #+BEGIN_SRC emacs-lisp
     (dolist (charset '(latin))
       (set-fontset-font (frame-parameter nil 'font)
                         charset
                         ;; (font-spec :family "Microsoft Yahei" ))
                         (font-spec :family "Noto Mono Sans" :size 15)))

   #+END_SRC
    
   主意，这里没有使用 =face-font-rescale-alist= 函数，如果采用这种方法设置西文字体，为了保持比例，
   你的亚洲语字体同样不能使用这个函数，这个函数是在西文全frame设置情况下使用才能正确设置西亚文之间
   的比例，关于这个比例后面会提到。
   #+END_QUOTE


   --------------------
   *symbol字体设置：*
    
   由于symbol是unicode的字符的一个扩展字符集合，因此为它单独设置一个编码涵盖比较全面的字体很必要，
   推荐google的，但是最全面的额还是symbola字体。

   [[https://fontlibrary.org/en/font/symbola#Symbola-Regular][symbola字体下载链接]]。 同时这个网站也罗列了很多字体。


   --------------------
   *比例：*

   在使用emacs的表格功能的时候（包括org-mode的表格），通常在没有额外设置下，如果你的表格中带有中西
   文混合的情况，那么你的看起来表格会是这样的：

   [[file:../annex/img/Snipaste_2018-04-12_19-01-55_2018-04-12_19-03-44.png]]

   是不是很有喜感 :yum: 。

   当然我更愿意相信当你看到这样的表格时候的表情是这样的 >:( 。

   这样的状况出现的原因是因为中西文字体在emacs中的显示比列并不是2:1，而是相当的messy :penguin: 。

   现在让我们把我们上述的中西文配置联合到一起：
   #+BEGIN_SRC emacs-lisp
     (when sys/win32p
       (set-face-attribute
        'default nil :font "Noto Sans Mono Light 11")
       ;;Setting Chinese Font
       (dolist (charset '(kana han symbol cjk-misc bopomofo))
         (set-fontset-font (frame-parameter nil 'font)
                           charset
                           ;; (font-spec :family "Microsoft Yahei" ))
                           (font-spec :family "Droid Sans"))
         (setq face-font-rescale-alist '(("Droid Sans" . 1.2)))))
   #+END_SRC

   看到了吗，第一个数字 ‘11’ 指向的是全局使用 =Noto Mono Sans= 西文字体，并且全局默认字号是 =11= 。
   第二在rescale中的是中文字体的名称和相对于全局字号的比例为 =1.2= ，因此这回上面的那个表格看起来是
   这样的：

   [[file:../annex/img/Snipaste_2018-04-12_19-16-08_2018-04-12_19-17-58.png]]

   #+BEGIN_QUOTE
   注意： 比例选项不能用于symbol字体设置，因为会覆盖cjk字体的比例设置，具体原因不详。
   #+END_QUOTE

   --------------------
   *使用Google的cjk mono字体,同时设置中英文字符：*
    
   方法请见[[file:Recode-for-config-learning.org::*字体设置][这里]]，只需要注意这个方法不能在放大字体的时候保持中英文比例。
   --------------------

   相关链接：
   - https://emacs-china.org/t/topic/5193/3
     #+BEGIN_SRC emacs-lisp
         (dolist (charset '(kana han symbol cjk-misc bopomofo))
             (set-fontset-font (frame-parameter nil 'font)
                               charset (font-spec :family "Noto Sans Mono CJK SC"))
             (setq face-font-rescale-alist '(("Noto Sans Mono CJK SC" . 1.2))))

       ;; 设置了 :size 大小好像会有字体放缩问题，用 face-font-rescale-alist 完美。
       ;; https://baohaojun.github.io/blog/2012/12/19/perfect-emacs-chinese-font.html
     #+END_SRC

      
   本仓库已经在 =elements/fonts/= 中把常用的字体存档。
   <<20180423181821>>

   以下是我个人的字体配置，供大家参考：
   #+BEGIN_SRC emacs-lisp
     (if (string= emacs-version "25.3.1")
         (progn
           (defun entropy/new-frame (&optional frame)
             (interactive)
             (when sys/win32p
               (setq use-default-font-for-symbols nil)
               ;; Setting English Font
               (set-face-attribute
                ;; 'default nil :font "Noto Sans Mono Light 11"
                'default nil :font "Noto Mono 11"
                )
               ;;Setting Chinese Font
               (dolist (charset '(kana han cjk-misc bopomofo))
                 (set-fontset-font (frame-parameter nil 'font)
                                   charset
                                   (font-spec :family "Droid Sans"))
                 (setq face-font-rescale-alist '(("Droid Sans" . 1.2))))
               (set-fontset-font (frame-parameter nil 'font)
                                 'symbol
                                 (font-spec :family "Symbola")
                                 )
               ))

           (add-hook 'after-init-hook 'entropy/new-frame)
           (add-to-list 'after-make-frame-functions 'entropy/new-frame))
       (progn
         (defun entropy/new-frame (&optional frame)
           (interactive)
           (when sys/win32p
             (setq use-default-font-for-symbols nil)
             ;; Setting English Font
             (set-face-attribute
              ;; 'default nil :font "Noto Sans Mono Light 11"
              'default nil :font "Noto Sans Mono 11"
              )
             ;;Setting Chinese Font
             (dolist (charset '(kana han cjk-misc bopomofo))
               (set-fontset-font (frame-parameter nil 'font)
                                 charset
                                 (font-spec :family "Droid Sans"))
               (setq face-font-rescale-alist '(("Droid Sans" . 1.2))))
             (set-fontset-font (frame-parameter nil 'font)
                               'symbol
                               (font-spec :family "Symbola")
                               )
             ))

         (add-hook 'after-init-hook 'entropy/new-frame)
         (add-to-list 'after-make-frame-functions 'entropy/new-frame))
       )
   #+END_SRC

   unicode字体显示测试文本：
   #+BEGIN_EXAMPLE
     ⇠  箭头类

     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     ⇠	&#8672	\u21E0	\21E0	⇢	&#8674	\u21E2	\21E2
     ⇡	&#8673	\u21E1	\21E1	⇣	&#8675	\u21E3	\21E3
     ↞	&#8606	\u219E	\219E	↠	&#8608	\u21A0	\21A0
     ↟	&#8607	\u219F	\219F	↡	&#8609	\u21A1	\21A1
     ←	&#8592	\u2190	\2190	→	&#8594	\u2192	\2192
     ↑	&#8593	\u2191	\2191	↓	&#8595	\u2193	\2193
     ↔	&#8596	\u2194	\2194	↕	&#8597	\u2195	\2195
     ⇄	&#8644	\u21C4	\21C4	⇅	&#8645	\u21C5	\21C5
     ↢	&#8610	\u21A2	\21A2	↣	&#8611	\u21A3	\21A3
     ⇞	&#8670	\u21DE	\21DE	⇟	&#8671	\u21DF	\21DF
     ↫	&#8619	\u21AB	\21AB	↬	&#8620	\u21AC	\21AC
     ⇜	&#8668	\u21DC	\21DC	⇝	&#8669	\u21DD	\21DD
     ↚	&#8602	\u219A	\219A	↛	&#8603	\u219B	\219B
     ↮	&#8622	\u21AE	\21AE	↭	&#8621	\u21AD	\21AD
     ⇦	&#8678	\u21E6	\21E6	⇨	&#8680	\u21E8	\21E8
     ⇧	&#8679	\u21E7	\21E7	⇩	&#8681	\u21E9	\21E9
     ▲	&#9650	\u25B2	\25B2	►	&#9658	\u25BA	\25BA
     ▼	&#9660	\u25BC	\25BC	◄	&#9668	\u25C4	\25C4
     ➔	&#10132	\u2794	\2794	➙	&#10137	\u2799	\2799
     ➨	&#10152	\u27A8	\27A8	➲	&#10162	\u27B2	\27B2
     ➜	&#10140	\u279C	\279C	➞	&#10142	\u279E	\279E
     ➟	&#10143	\u279F	\279F	➠	&#10144	\u27A0	\27A0
     ➤	&#10148	\u27A4	\27A4	➥	&#10149	\u27A5	\27A5
     ➦	&#10150	\u27A6	\27A6	➧	&#10151	\u27A7	\27A7
     ➵	&#10165	\u27B5	\27B5	➸	&#10168	\u27B8	\27B8
     ➼	&#10172	\u27BC	\27BC	➽	&#10173	\u27BD	\27BD
     ➺	&#10170	\u27BA	\27BA	➳	&#10163	\u27B3	\27B3
     ↷	&#8631	\u21B7	\21B7	↶	&#8630	\u21B6	\21B6
     ↻	&#8635	\u21BB	\21BB	↺	&#8634	\u21BA	\21BA
     ↵	&#8629	\u21B5	\21B5	↯	&#8623	\u21AF	\21AF
     ➾	&#10174	\u27BE	\27BE				

     ❤  基本形状类
     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     ❤	&#10084	\u2764	\2764	✈	&#9992	\u2708	\2708
     ★	&#9733	\u2605	\2605	✦	&#10022	\u2726	\2726
     ☀	&#9728	\u2600	\2600	◆	&#9670	\u25C6	\25C6
     ◈	&#9672	\u25C8	\25C8	▣	&#9635	\u25A3	\25A3
     ☻	&#9787	\u263B	\263B	☺	&#9786	\u263A	\263A
     ☹	&#9785	\u2639	\2639	✉	&#9993	\u2709	\2709
     ☎	&#9742	\u260E	\260E	☏	&#9743	\u260F	\260F
     ✆	&#9990	\u2706	\2706	�	&#65533	\uFFFD	\FFFD
     ☁	&#9729	\u2601	\2601	☂	&#9730	\u2602	\2602
     ❄	&#10052	\u2744	\2744	☃	&#9731	\u2603	\2603
     ❈	&#10056	\u2748	\2748	✿	&#10047	\u273F	\273F
     ❀	&#10048	\u2740	\2740	❁	&#10049	\u2741	\2741
     ☘	&#9752	\u2618	\2618	❦	&#10086	\u2766	\2766
     ☕	&#9749	\u9749	\9749	❂	&#10050	\u2742	\2742
     ☥	&#9765	\u2625	\2625	☮	&#9774	\u262E	\262E
     ☯	&#9775	\u262F	\262F	☪	&#9770	\u262A	\262A
     ☤	&#9764	\u2624	\2624	✄	&#9988	\u2704	\2704
     ✂	&#9986	\u2702	\2702	☸	&#9784	\u2638	\2638
     ⚓	&#9875	\u2693	\2693	☣	&#9763	\u2623	\2623
     ⚠	&#9888	\u26A0	\26A0	⚡	&#9889	\u26A1	\26A1
     ☢	&#9762	\u2622	\2622	♻	&#9851	\u267B	\267B
     ♿	&#9855	\u267F	\267F	☠	&#9760	\u2620	\2620

     ¥  货币类
     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     $	&#36	\u0024	\0024	¢	&#162	\u00A2	\00A2
     £	&#163	\u00A3	\00A3	¤	&#164	\u00A4	\00A4
     €	&#8364	\u20AC	\20AC	¥	&#165	\u00A5	\00A5
     ₱	&#8369	\u20B1	\20B1	₹	&#8377	\u20B9	\20B9

     ½  数学类
     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     ½	&#189	\u00BD	\00BD	¼	&#188	\u00BC	\00BC
     ¾	&#190	\u00BE	\00BE	⅓	&#8531	\u2153	\2153
     ⅔	&#8532	\u2154	\2154	⅛	&#8539	\u215B	\215B
     ⅜	&#8540	\u215C	\215C	⅝	&#8541	\u215D	\215D
     ‰	&#8240	\u2030	\2030	%	&#37	\u0025	\0025
     <	&#60	\u003C	\003C	>	&#62	\u003E	\003E

     ♫  音乐符号类
     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     ♩	&#9833	\u2669	\2669	♪	&#9834	\u266A	\266A
     ♫	&#9835	\u266B	\266B	♬	&#9836	\u266C	\266C
     ♭	&#9837	\u266D	\266D	♯	&#9839	\u266F	\266F

     ✖  对错号
     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     &#160	\u00A0	\00A0	☐	&#9744	\u2610	\2610
     ☑	&#9745	\u2611	\2611	☒	&#9746	\u2612	\2612
     ✓	&#10003	\u2713	\2713	✔	&#10004	\u2714	\2714
     ✕	&#10005	\u10005	\10005	✖	&#10006	\u2716	\2716
     ✗	&#10007	\u2717	\2717	✘	&#10008	\u2718	\2718

     ★  全都是星星
     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     ★	&#9733	\u2605	\2605	✭	&#10029	\u272D	\272D
     ✮	&#10030	\u272E	\272E	☆	&#9734	\u2606	\2606
     ✪	&#10026	\u272A	\272A	✡	&#10017	\u2721	\2721
     ✯	&#10031	\u272F	\272F	✵	&#10037	\u2735	\2735
     ✶	&#10038	\u2736	\2736	✸	&#10040	\u2738	\2738
     ✹	&#10041	\u2739	\2739	✺	&#10042	\u273A	\273A
     ✱	&#10033	\u2731	\2731	✲	&#10034	\u2732	\2732
     ✴	&#10036	\u2734	\2734	✳	&#10035	\u2733	\2733
     ✻	&#10043	\u273B	\273B	✽	&#10045	\u273D	\273D
     ❋	&#10059	\u274B	\274B	❆	&#10054	\u2746	\2746
     ❄	&#10052	\u2744	\2744	❅	&#10053	\u2745	\2745

     ♒  星座类
     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     ♈	&#9800	\u2648	\2648	♉	&#9801	\u2649	\2649
     ♊	&#9802	\u264A	\264A	♋	&#9803	\u264B	\264B
     ♌	&#9804	\u264C	\264C	♍	&#9805	\u264D	\264D
     ♎	&#9806	\u264E	\264E	♏	&#9807	\u264F	\264F
     ♐	&#9808	\u2650	\2650	♑	&#9809	\u2651	\2651
     ♒	&#9810	\u2652	\2652	♓	&#9811	\u2653	\2653

     ♚  国际象棋类
     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     ♚	&#9818	\u265A	\265A	♛	&#9819	\u265B	\265B
     ♜	&#9820	\u265C	\265C	♝	&#9821	\u265D	\265D
     ♞	&#9822	\u265E	\265E	♟	&#9823	\u265F	\265F
     ♔	&#9812	\u2654	\2654	♕	&#9813	\u2655	\2655
     ♖	&#9814	\u2656	\2656	♗	&#9815	\u2657	\2657
     ♘	&#9816	\u2658	\2658	♙	&#9817	\u2659	\2659

     ♣  扑克牌类
     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     ♠	&#9824	\u2660	\2660	♣	&#9827	\u2663	\2663
     ♥	&#9829	\u2665	\2665	♦	&#9830	\u2666	\2666
     ♤	&#9828	\u2664	\2664	♧	&#9831	\u2667	\2667
     ♡	&#9825	\u2661	\2661	♢	&#9826	\u2662	\2662

     Ω  希腊字母
     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     Α	&#913	\u0391	\0391	Β	&#914	\u0392	\0392
     Γ	&#915	\u0393	\0393	Δ	&#916	\u0394	\0394
     Ε	&#917	\u0395	\0395	Ζ	&#918	\u0396	\0396
     Η	&#919	\u0397	\0397	Θ	&#920	\u0398	\0398
     Ι	&#921	\u0399	\0399	Κ	&#922	\u039A	\039A
     Λ	&#923	\u039B	\039B	Μ	&#924	\u039C	\039C
     Ν	&#925	\u039D	\039D	Ξ	&#926	\u039E	\039E
     Ο	&#927	\u039F	\039F	Π	&#928	\u03A0	\03A0
     Ρ	&#929	\u03A1	\03A1	Σ	&#931	\u03A3	\03A3
     Τ	&#932	\u03A4	\03A4	Υ	&#933	\u03A5	\03A5
     Φ	&#934	\u03A6	\03A6	Χ	&#935	\u03A7	\03A7
     Ψ	&#936	\u03A8	\03A8	Ω	&#937	\u03A9	\03A9

     ☩  十字
     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     ☨	&#9768	\u2628	\2628	☩	&#9769	\u2629	\2629
     ✝	&#10013	\u271D	\271D	✞	&#10014	\u271E	\271E
     ✟	&#10015	\u271F	\271F	✠	&#10016	\u2720	\2720
     ✚	&#10010	\u271A	\271A	†	&#8224	\u2020	\2020
     ✢	&#10018	\u2722	\2722	✤	&#10020	\u2724	\2724
     ✣	&#10019	\u2723	\2723	✥	&#10021	\u2725	\2725

     ©  法律符号
     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     ®	&#174	\u00AE	\00AE	©	&#169	\u00A9	\00A9
     ℗	&#8471	\u2117	\2117	™	&#153	\u0099	\0099
     ℠	&#8480	\u2120	\2120				

     @  标点和符号
     符号	UNICODE	符号	UNICODE
     HTML	JS	CSS	HTML	JS	CSS
     «	&#171	\u00AB	\00AB	»	&#187	\u00BB	\00BB
     ‹	&#139	\u008B	\008B	›	&#155	\u009B	\009B
     “	&#8220	\u201C	\201C	”	&#8221	\u201D	\201D
     ‘	&#8216	\u2018	\2018	’	&#8217	\u2019	\2019
     •	&#8226	\u2022	\2022	◦	&#9702	\u25E6	\25E6
     ¡	&#161	\u00A1	\00A1	¿	&#191	\u00BF	\00BF
     ℅	&#8453	\u2105	\2105	№	&#8470	\u2116	\2116
     &	&#38	\u0026	\0026	@	&#64	\u0040	\0040
     ℞	&#8478	\u211E	\211E	℃	&#8451	\u2103	\2103
     ℉	&#8457	\u2109	\2109	°	&#176	\u00B0	\00B0
     |	&#124	\u007C	\007C	¦	&#166	\u00A6	\00A6
     –	&#8211	\u2013	\2013	—	&#8212	\u2014	\2014
     …	&#8230	\u2026	\2026	¶	&#182	\u00B6	\00B6
     ∼	&#8764	\u223C	\223C	≠	&#8800	\u2260	\2260

   #+END_EXAMPLE
    
   unicode 编码列表链接：[[https://www.compart.com/en/unicode/category/Lu]]

   *Entropy-fontsetting:*

   为了快速使用本仓库，我建立了内置的字体设置，这一套字体配置是我在win10平台上用的，对中日韩和symbol
   字体的处理如上述。这个字体设置默认是开启的，你只需要把这个repo中存档的字体包[[20180423181821][here!]]全部安装即可。

   如果需要使用自定义字体配置，请 设置 变量 =entropy/font-setting-enable= 为nil 即可。

** 最后
   :PROPERTIES:
   :CUSTOM_ID: h-193e025f-e264-46ab-b3cb-dbc6e3f1ffff
   :END:
   emacs是自由工具，同样可能是很多自由软件爱好者的共同话题，emacs并不完美，甚至瑕疵过多，我之所以继
   续使用它，是因为希望有一天自己能够为emacs做出贡献，让它变得越来越完美。
* Learning major mode within entropy-emacs
  :PROPERTIES:
  :CUSTOM_ID: h-b8579e39-6448-4482-8851-a4f7b768eff2
  :END:
** DONE [#A] artist-mode
   CLOSED: [2018-04-11 Wed 18:31]
   :PROPERTIES:
   :CUSTOM_ID: h-d26da71e-d934-400b-a9d8-bda0bb6ec601
   :END:
   - State "DONE"       from "TODO"       [2018-04-11 Wed 18:31]
   - State "TODO"       from              [2018-04-09 Mon 19:20]


   artist-mode 是emacs的一个很fancy的功能，在这个模式中，你可以用ASCII码来画图，比如：
   #+BEGIN_EXAMPLE

       +----------------------------------------+
       |   +----------+                         |
       |   |  吃饭    |                         |
       |   |          |                         |
       |   +-----+----+                         |
       |         |                              |
       |         |                              |
       |   +-----v-----+                        |
       |   | 睡觉      |                        |
       |   |           |                        |
       |   +-----+-----+                        |
       |         |                              |
       |         |                +--------+    |
       |       --v--              |        |    |
       |      (睡不着) ---------->| 看手机 |    |
       |       --+--              |        |    |
       |         |                +---+----+    |
       |         |                    |         |
       |         |                    |         |
       |         |                    |         |
       |         v                    v         |
       |     +-------+            +----------+  |
       |     | 做梦  |            | 继续睡   |  |
       |     +-------+            +----------+  |
       |           \-               -/          |
       |             \-           -/            |
       |               \-      --/              |
       |                 \-  -/                 |
       |                   +/                   |
       |                   |                    |
       |                   |                    |
       |                   v                    |
       |               +--------+               |
       |               |起床    |               |
       |               |        |               |
       |               +--------+               |
       |                                        |
       |                                        |
       +----------------------------------------+
   #+END_EXAMPLE


   对，我用它画了一个流程图---我的一天 :) 。

   *注意：*

   - 在artist-mode中尽量不要使用中文，因为它不是ASCII码，所以在很多时候，程式无法处理，比如在这张我
     的一天中由于我在标注的时候用的中文说明，导致在中文字符旁无法使用移动和删除功能，只能移动到文字
     开头，使用空格填充该区域，来擦除掉文字，例如：

     #+BEGIN_EXAMPLE

       +---------------------------------+                         +----------------------------------------+
       |                                 |                         |                                        |
       |  我想要改写这个歌               |------------------------>|               歌                       |
       +-----------------^---------------+                         +--^^^^^^^^^^^^^-------------------------+
                         |                                            |
                         |                                            |
                         |                                            |
                         |                                            |
                     This is the wrong character                     I could only rewrite them all
                  and I want to erase it

     #+END_EXAMPLE
*** 怎样使用 artist-mode?
    :PROPERTIES:
    :CUSTOM_ID: h-d0356094-2031-4ff6-bc5d-c85d7a3f735f
    :END:
    首先要记住，在 artist-mode中出了文字输入外任何操作都是通过坐标定位来完成的,也就是说：
    - 定位一个启始的点（通过enter）
    - 定位一个对角的点（通过enter）


    例如：
    #+BEGIN_EXAMPLE
       1 (init position)                    +-------------+
                                            |             |
                         ------------------->             |
                                            |             |
                                            |             |
                    2                       +-------------+
                  (end-up position)
    #+END_EXAMPLE

    当然这是一个画矩形的例子，在artist-mode中还有圆，椭圆等命令，当然还有各种线的类型，你可以在
    artist-mode中使用 =C-c C-a C-o= 来调用图形选择命令来查看或选择所有支持的图形和线段。下面是候选单
    的例图：

    [[file:../annex/img/Snipaste_2018-04-11_18-23-18_2018-04-11_18-23-36.png]]

** Mark-done [#C] ivy-mode
   CLOSED: [2018-04-15 Sun 00:10]
   :PROPERTIES:
   :CUSTOM_ID: h-7e4e52ca-fa11-4a4b-8189-a9793ffaa1fc
   :END:
   - State "Mark-done"  from "TODO"       [2018-04-15 Sun 00:10] \\
     Basiclly completed
   - State "TODO"       from              [2018-04-02 Mon 20:10]


   ivy 是一个emacs的候选工具，更感官的说是一个emacs的候选项提示框架，你在emacs中的任何需要选择的行为
   都可以是用ivy来提供界面互动。

   它的样子是交互界面是通过提高minibuffer的界面高度来列出候选单位：
   #+BEGIN_EXAMPLE
                 +-----------------------------------+
                 | I                                  |
                 |                                   |
                 |                                   |
                 |                                   |
                 |                                   |
                 |                                   |
                 |                                   |
                 |                                   |
                 +-----------------------------------+
                 |Choose your candidates:            |
                 +-----------------------------------+
                 |candidates:                        |
                 |1.apple                            |
                 |2.banaa                            |
                 |3. ..........                      |
                 +-----------------------------------+
   #+END_EXAMPLE
   
   但是ivy只是一个框架，具体的功能函数需要自行编写，比如选择一个文件。

   counsel 是一个使用ivy框架编写的工具集合，counsel工具集合包含了大多数用户最常用的候选提示函数，比
   如entropy-emacs已经把 =counsel-find-file= 替换了原生的 =find-file= 。
   
   下面将要给出一些新用户不常用到，但是却极其有用的counsel工具。
*** counsel
    :PROPERTIES:
    :CUSTOM_ID: h-5abe6aef-bb4f-407a-922c-1d48f570a412
    :END:
    - 文档操作类
      - counsel-org 组
        - counsel-org-goto
          搜索当前org文件的标题。可用于快速定位。
        - counsel-org-goto-all
          搜索在本frame下所有打开的org buffer中的标题。可用于不同org文件中的快速跳转。
        - counsel-org-capture
          快速选择caputre模板。
        - coinsel-org-entity
          插入实体扩展字符如： À ℘ δ π 等符号。
      - counsel-yank-pop
        查看剪贴板，并选取插入候选项。
      - counsel-recentf
        显示最近打开的文件，并打开候选项。
      - counsel-ibuffer
        快速查看当前已打开的buffer。
      - counsel-bookmark
        快速选取书签
      - counsel-mark-ring
        快速选取标记点（即：文档中的跳转位置）
      - counsel-unicode-char
        查询或插入unicode字符 如： 00000C FORM FEED (FF)
        
        (分页符号)

    - 系统配置类
      - counsel-face
        查看当前所有的所有组件所配置的emacs face。

        [[file:../annex/img/Snipaste_2018-04-14_22-12-14_2018-04-14_22-12-31.png]]

      - counsel-set-variable
        快速设置一个变量的值
    - 编程辅助类
      - counsel-css
        快速查看css文件中的selectioin
      - counsel-colors-web
        快速选取一个颜色

        [[file:../annex/img/Snipaste_2018-04-14_22-21-26_2018-04-14_22-21-35.png]]

      - counsel-git-log
        快速查看一个git-log
      - counsel-company
        使用ivy来弹出compnay补全
        #+BEGIN_QUOTE
        一个bug： 在使用 =C-g= 取消了counsel-company后会弹出company的补全框。
        #+END_QUOTE

        [[file:../annex/img/counsel-company_2018-04-14_22-33-09.gif]]
*** ivy 候选区中的快捷键
    :PROPERTIES:
    :CUSTOM_ID: h-4c48adbe-df22-46c5-9d77-08e8b80ce434
    :END:
    - =C-M m=\\
      递归输入
    - =C-M j=\\
      强制输入
    - =C-c C-o=\\
      传递候选列表至一个单独的buffer
    - =M-o=\\
      扩展功能
      
** TODO [#B] web-mode
   :PROPERTIES:
   :CUSTOM_ID: h-31801eec-0d05-4fa5-a659-a0fe21cdc271
   :END:
   - State "TODO"       from              [2018-04-02 Mon 20:10]
** Doing [#B] org-mode
   :PROPERTIES:
   :CUSTOM_ID: h-9f0b8a23-deed-491b-b1d1-d905c8508b4d
   :END:
   - State "Doing"      from "TODO"       [2018-04-15 Sun 00:12]
   - State "TODO"       from              [2018-04-02 Mon 20:10]
*** 小技巧
    :PROPERTIES:
    :CUSTOM_ID: h-621cc0a7-31cb-496c-bf4e-001d81300754
    :END:
**** 列表与标题互相转换
     :PROPERTIES:
     :CUSTOM_ID: h-9ddfe95a-5845-414f-a276-2c5d0a182aa6
     :END:
***** org-toggle-heading
      :PROPERTIES:
      :CUSTOM_ID: h-20a8035b-4f74-4d44-9951-6dba75fb47dd
      :END:
***** org-toggle-item
      :PROPERTIES:
      :CUSTOM_ID: h-e133ba3e-31eb-4b96-963f-9cb70a435cb0
      :END:
***** org-list-to-subtreet
      :PROPERTIES:
      :CUSTOM_ID: h-733ed305-e8e7-421d-80c0-4e5140d7f04a
      :END:
** DONE [#B] popwin-mode
   CLOSED: [2018-04-15 Sun 00:17]
   :PROPERTIES:
   :CUSTOM_ID: h-500bb2d3-433c-467b-8ef3-972071c6667d
   :END:
   - State "DONE"       from "TODO"       [2018-04-15 Sun 00:17]
   - State "TODO"       from              [2018-04-13 Fri 16:03]

     
   popwin 顾名思义是一个弹出式的窗口管理器，使用它可以快速的检阅一个buffer然后自动焦点它，最后可以快
   速退出弹出窗口。
   
   你可以使用前缀 =C-z= 查看它提供的函数，其中： popwin:find-file 和 popwin-display-buffer 和
   popwin:messages是我常用的利器。

   [[file:../annex/img/Snipaste_2018-04-15_00-16-46_2018-04-15_00-16-53.png]]

* learning interactive function
  :PROPERTIES:
  :CUSTOM_ID: h-e78903e4-1deb-49da-9bf6-f0d14c05ec55
  :END:
* FAQ:
  :PROPERTIES:
  :CUSTOM_ID: h-ec338033-6164-4954-a270-f165322f4523
  :END:
** Hangup [#C] [2018-03-20 Tue 00:21] yas-new-snippet 会使得magit无法定位目录?
   CLOSED: [2018-04-09 Mon 19:17]
   :PROPERTIES:
   :CUSTOM_ID: h-9ab9f89d-5c36-4b3b-9526-9ba22b758ef0
   :END:
   - State "Hangup"     from "TODO"       [2018-04-09 Mon 19:17]
   - Note taken on [2018-04-09 Mon 19:17] \\
     For now version of my emacs with no problem I don't why as well
   - State "TODO"       from              [2018-03-20 Tue 01:17]
   yas-new-snippet 会使得magit无法定位目录，具体的messages是：
   #+BEGIN_EXAMPLE
   apply: Setting current directory: Invalid argument, a:/mobile-bmsa_20161205/PortableApps/Git-sdk64Portable/bin/home/entropy-wsl/Entropy/20180125221656/elements/snippets/web-mode/
   #+END_EXAMPLE

   必须执行yas-reload-all才能消除这个bug

   faq 报告草稿：
   #+BEGIN_SRC markdown
     # Hello magit or yasnippet developer

     There's one problem I found in magit or yasnnippet:

     > When I create new snippet which using command `yas-new-snippet` and then without `yas-reload-all`
     > then I used magit for some git repo will report that:

     ```
     apply: Setting current directory: Invalid argument, a:/home/lynd/my-snippets/web-mode/
     ```

     And if I want  to checkout this mistake for using magit properly I must order `M-x: yas-reload-all`.

     How this happened? Is it one bug?

     Without reload yasnippet I also can use yasnippet properly but magit?
   #+END_SRC
*** [2018-03-20 Tue 06:36:26]
    :PROPERTIES:
    :CUSTOM_ID: h-5ac8fd6e-ff66-47ba-9153-e86e58edfae0
    :END:
    给magit的hook添加一条 ~yas-reload-all~ 可以解决问题 但是yas-reload-all需要时间，可能会带来等待问
    题，在观察观察。
** Hangup Emacs-FAQ: [2018-03-20 Tue 01:18] web-mode 中的php代码块会有时候在编辑的时候无高亮显示
   CLOSED: [2018-03-22 Thu 03:19]
   :PROPERTIES:
   :CUSTOM_ID: h-ffb6efb1-fd7d-42b4-bc00-2f49e294302d
   :END:
   <<web-mode-bug>>
   - State "Hangup"     from "TODO"       [2018-03-22 Thu 03:19] \\
     目前是手动刷新主模式解决，依然希望能从根本上解决这个问题。
   只有利用 =entropy/toggle-php-flavor-mode= 切换到php-mode然后在切回来才能显示php代码高亮。

   我估计这是一个web-mode的bug

   [2018-03-20 Tue 06:34:19] 使用 ~web-mode-set-engines php~ 即可 （已修改到配置）\\
   [2018-03-22 Thu 03:18:17] 任然有这个问题，加入了entropy/major-mode-reload函数手动刷新主模式解决。

  --end--
  -----
** DONE Emacs-FAQ: [2018-03-20 Tue 01:49] 在web-mode中无法使用search-web的快捷键因为被emmet-wrap占用
   CLOSED: [2018-03-22 Thu 03:17]
   :PROPERTIES:
   :CUSTOM_ID: h-9fd8a1c7-ccbe-49a8-8ead-0e1985058f70
   :END:

   - State "DONE"       from "TODO"       [2018-03-22 Thu 03:17]
   [2018-03-20 Tue 06:35:47]
   已经从emmet-mode-kemmap中删除这个会计键

  --end--
  -----
** TODO [#C] Emacs-FAQ: [2018-03-20 Tue 11:50] windows 上emacs有几率屏幕轻微闪烁
   :PROPERTIES:
   :CUSTOM_ID: h-f0cdab16-0cbc-4d52-8b55-de291fd240fa
   :END:
   - [2018-03-20 Tue 11:50:39] 可能是字体问题
   - [2018-03-24 Sat 00:05:10] 经常在org-bullet上闪烁
   - [2018-03-29 Thu 18:34:59] 已经卸载了org-bullet,但是我估计是emacs在win上的本身bug，需要上游解决，
     看看是或否有时间想emacs官方提交bug。
   - [2018-04-02 Mon 19:26:39] 还有一个原因是因为启用了visible-bell后的闪屏错觉。


  --end--
  -----
** Hangup Emacs-FAQ: [2018-03-22 Thu 03:10] emacs win10 会有几率无法输入大写字母。 :emacs:faq:
   CLOSED: [2018-03-29 Thu 18:36]
   :PROPERTIES:
   :CUSTOM_ID: h-f177551f-bfd4-4b97-a5c4-cc528f1b45f7
   :END:
   - State "Hangup"     from "TODO"       [2018-03-29 Thu 18:36]
   前天我出去买了一包烟回来，发现emacs无法输入大写字母。

   昨天下午我起床依然发现这个问题。

   问题预判：
   1. 长时间不用电脑（锁屏状态下）
   2. 搜狗输入法的问题\\
      但是其他程序没有这个问题
      #+BEGIN_QUOTE
      因为我默认是关闭了系统输入法的，当我重新再windows的区域和语言菜单中添加上微软输入法后，又一切
      正常了，因此我才怀疑是搜狗的问题。
      #+END_QUOTE
   3. windwos的问题，可能是更新带来的问题。


   [2018-03-22 Thu 03:20:06] 尝试重复问题：
   重启机器，打开emacs（使用原版，问题也是原版的），锁定计算机，睡觉。

   *Result:*
   Without error
*** DONE [2018-03-22 Thu 11:24:02] 连续一个礼拜的计划测试
    CLOSED: [2018-03-27 Tue 17:44] DEADLINE: <2018-03-29 Sun>
    :PROPERTIES:
    :LAST_REPEAT: [2018-03-25 Sun 12:30]
    :CUSTOM_ID: h-074a0794-fd41-4693-932a-aeee8a624463
    :END:
    - State "DONE"       from "TODO"       [2018-03-27 Tue 17:44]
    - State "DONE"       from "TODO"       [2018-03-25 Sun 12:30]
    - State "TODO"       from              [2018-03-22 Thu 11:24]

    - [2/4] 第一天
      - [ ] 检查win10win10是否更新
      - [X] 保持开机
      - [X] 斗鱼自动开启
      - [ ] 使用 25.3 origin 测试\\
	使用的25.2的原生版本。
      - 检测状态：未发现现象。

    - [3/4] 第二天
      - [ ] 检查win10是否更新
      - [X] 保持开机
      - [X] 斗鱼自动开启
      - [X] 使用 25.3 origin 测试
      - 检测结果：未发现现象
    - [4/4] 第三天
      - [X] 检查win10是否更新\\
	未更新
      - [X] 保持开机
      - [X] 斗鱼自动开启
      - [X] 使用 25.3 origin 测试
      - 检测状态：未发现现象。
    - [0/4] 第四天
      - [ ] 检查win10win10是否更新
      - [ ] 关机重启
      - [ ] 斗鱼自动开启
      - [ ] 使用 25.3 origin 测试
    - [0/4] 第五天
      - [ ] 检查win10win10是否更新
      - [ ] 关机重启
      - [ ] 斗鱼自动开启
      - [ ] 使用 25.3 origin 测试
    - [0/4] 第六天
      - [ ] 检查win10win10是否更新
      - [ ] 关机重启
      - [ ] 斗鱼自动开启
      - [ ] 使用 25.3 origin 测试



  --end--
  -----
**** [2018-03-27 Tue 22:37:18] 目前意识上认定是windows的问题，升级后暂无现象出现，因此搁置测试。
     :PROPERTIES:
     :CUSTOM_ID: h-e0e92cf9-8cac-4b15-b9c4-bfe036b664f2
     :END:
** TODO [#C] Emacs-FAQ: [2018-03-23 Fri 23:01] undo tree error
   :PROPERTIES:
   :CUSTOM_ID: h-ddcfd2de-70a1-461f-80d9-13c208cd9cbe
   :END:
   这是一个bug，error信息是：
   #+BEGIN_EXAMPLE
   primitive-undo: Unrecognized entry in undo list (#<overlay in no buffer> . 1)
   #+END_EXAMPLE

   Reproduce；
   1. open one php file using newly php-mode installed from melpa.(my version was PHP Mode 1.19.0 of
      2018-03-05)


   2. build the yasnippet for php-mode below:
      #+BEGIN_EXAMPLE
	# -*- mode: snippet -*-
	# name: php-sign
	# key: phpsign
	# --

	<?php
	$1
	?>
	$0
      #+END_EXAMPLE


   3. type this snippet to the brand new php file and then view below gif:

      [[file:../annex/img/undo-tree-error_2018-03-23_23-10-36.gif]]


   And the bug issue was appear for a long time at [[https://github.com/syl20bnr/spacemacs/issues/298][github issue]].

   For more similar state was in when undo cmd using after undo-tree enable,and this github issue
   report was it.

   Why I report this for refering to this github issue cause of the same error message although
   occur in different state.

  --end--
  -----
** DONE Emacs-FAQ: [2018-03-24 Sat 02:29] orgstruct的正则表达式中的 =\s= 无效
   CLOSED: [2018-03-24 Sat 03:03]
   :PROPERTIES:
   :CUSTOM_ID: h-c6a8efca-fc99-4a3e-9287-94200f6e7cdf
   :END:
   - Note taken on [2018-03-29 Thu 18:38] \\
     这个问题是这样的，在elisp中的正则表达式没有 =\s= 这个转义符号，因此只能使用原生的tab插入到orgstruct
     的头标的正则表达式中即可
   - State "DONE"       from "TODO"       [2018-03-24 Sat 03:03]
   - Note taken on [2018-03-24 Sat 03:02] \\
     已修复为tab原生符号。
  --end--
  -----
** TODO [#C] Emacs-FAQ: [2018-03-24 Sat 03:48] company-php will cover company-dabbrev-code
   :PROPERTIES:
   :CUSTOM_ID: h-c05f9576-cc2e-4219-8aba-75e5c346881e
   :END:


   - Note taken on [2018-03-29 Thu 18:40] \\
     我查阅了ac-php的官方配置方式，其中的company-backend配置也是使用的locale variable。这说明本身官方也不
     推荐使用能够全局添加company-backend。

     我想这是ac-php的设计问题，我准备提交bug：
     #+BEGIN_SRC markdown
       # Problem of covering all other company-backend when use gloable adding method of company-backend:

       Hi ac-php maintainer:

       I'm one newbie of emacs of one php programmer who loves ac-php and must be needed by it for daily
       job. But now I found ac-php‘s company-backend's adding will cover other company-backend such as
       company-dabbrev-code if I useing global adding method of company-backend instead of locale variable
       of company-backends which was show in ac-php README.md.

       My confusing was:
       - Does ac-php was mainly for ac-complete and less for company-mode from it's name "ac-....."
       - Does ac-php's original intention was just use the local variable of company-backends.
       - If not with upon,how could I let it be succeed with global adding without covering other backends
         like the behaviour backends from other 'company-mode' package like company-anaconda.

     #+END_SRC
  --end--
  -----
** DONE [#C] Emacs-FAQ: [2018-03-30 Fri 20:37] company-web-html 不支持 ·-· 后的补全
   CLOSED: [2018-04-04 Wed 04:18]
   :PROPERTIES:
   :CUSTOM_ID: h-d9e2bc0d-15cc-4875-9380-a1bf036e3fd7
   :END:
   - Note taken on [2018-04-04 Wed 04:19] \\
     company-web maintainer has fixed this bug with select the collect regexp.
   - State "DONE"       from "TODO"       [2018-04-04 Wed 04:18]
   *具体问题描述：*

   假设你需要补全一个css样式： =border-width= 那么你只能够输入 ‘border’ 而不能带有 ‘-’。

   也就是说在 =border-= 进行 =M-x company-web-html= 是无法匹配到任何信息的。

   [[https://github.com/osv/company-web/issues/17][Submitted issue]]
   #+BEGIN_SRC markdown
     # Hi company-web maintainer:

     Recently I found the problem with auto completetion in company-web-html for auto completing the css style of some thing like :`border-` which just can be use `border` without the `-`.

     For more details are:

     > For complete the `border-width` .

     1. auto complete succeed :
     ```
     Type `border` and then `M-x company-web-html` immediatly
     ```

     2. auto complete with none candidates:
     ```
     Type `border-` and then `M-x company-web-html`
     ```


     Focus on the only little difference between them are that containing the `-` character.

     Hope for you help! 👍


   #+END_SRC


  --end--
  -----
** TODO [#C] Emacs-FAQ: [2018-03-31 Sat 03:32] markdown-mode bug for displaying emoji with emojify-mode
   :PROPERTIES:
   :CUSTOM_ID: h-0cce3cc7-53fd-46fd-93d6-9b761fbd5833
   :END:


  --end--
  -----

** Hangup [#C] Emacs-FAQ: [2018-04-01 Sun 13:14] windows 中 helm-pt 和 shell-mode 的语言环境冲突问题
   CLOSED: [2018-04-09 Mon 19:14]
   :PROPERTIES:
   :CUSTOM_ID: h-7e266d46-2261-4c95-9ab9-61154d0f3bc7
   :END:
   - State "Hangup"     from "TODO"       [2018-04-09 Mon 19:14] \\
     At present, I fix it by use the mode-hook for individual mode
   目前设置的是shell-mode默认开启全局UTF-8环境，也就是初始化emacs是无语言环境设置的，这样导致pt会中
   文乱码。

   另外一个shell-mode的逻辑漏洞，就是除非关闭shell的buffer不然全局都是UTF-8.

   目前的一个修复思路是使用监测程式：
   #+BEGIN_SRC emacs-lisp
     (defun entropy/pt-or-shell ()
       (if (and (string= current-language-environment "UTF-8")
                (not (or (string-match-p (regexp-quote "*shell*") (format "%s" (buffer-list)))
                         (string-match-p (regexp-quote "*helm pt*") (format "%s" (buffer-list)))
                         )))
           (progn
             (set-terminal-coding-system nil)
             (set-keyboard-coding-system nil)
             (set-language-environment entropy/language-environment))))

     (defun entropy/daemon-lang-toggle-server-start ()
       (interactive)
       (run-at-time t 1 'entropy/pt-or-shell))

     (defun entropy/daemon-lang-toggle-server-down ()
       (interactive)
       (cancel-function-timers 'entropy/pt-or-shell))
   #+END_SRC

   但是问题是由于helm-pt的buffer不会自动关闭，导致无法监测成功。

   并且监测程式只是对于shell和pt的buffer不存在时候起到作用，并不能解决语言环境只能全局性的问题，即：

   |
   v

   =set-language-environment= 这个函数只能是全局性的

   因此现在这个问题只能通过手动调用 =entropy/toggle-utf-8-and-locale= 这个函数才能解决，可是失去了自
   动性，一切会变得略有繁琐,和提升操作失误率，直接导致操作流畅感。


  --end--
  -----

** DONE Emacs-FAQ: [2018-04-05 Thu 02:22] company-web 在 <style>...</style> 区域中无法使用css补全
   CLOSED: [2018-04-09 Mon 19:12]
   :PROPERTIES:
   :CUSTOM_ID: h-b1c8c40b-ffde-44e0-88cd-381e7d64237f
   :END:

   - Note taken on [2018-04-09 Mon 19:12] \\
     Because is the problem of company-css
   - State "DONE"       from "TODO"       [2018-04-09 Mon 19:12]
   [[https://github.com/osv/company-web/issues/19][github issue]]
   #+BEGIN_SRC markdown
     Hi company-web maintainer:

     This problem was similar with [Cann't complete with the `-`](https://github.com/osv/company-web/issues/17) and I think this was as well the bug
     in regexp but it is of area detected.

     The details is below:

     - Assume the html area was like:
     ``` html
     <html>
         <head>
             <style>
                 .class{
                   border.......
                 }
             </style>
         </head>
         <body>
         </body>
     </html>
     ```

     - follow the uppon DEMO, I want to auto complete `border` for `border-width` with the company-mode
       messeage "No completion found" :

     ```
        +--------------------------------------------------+
        |   <html>                                         |
        |     <head>                                       |
        |       <style>                                    |
        |          .class { border-    <....    }          |
        |       </style>                   .               |
        |                                  .               |
        |                                  .               |
        |                              .....               |
        |                              .                   |
        |                              .                   |
        |                              .                   |
        |                              .                   |
        |                              .                   |
        |                              .                   |
        |                              .                   |
        |                       ........                   |
        |                       .                          |
        |                       .                          |
        |                       .                          |
        |                       .                          |
        |                       .                          |
        |                       .                          |
        |-----------------------.--------------------------|
        | <test.html> u(unix)  <web-mode>       13:00      |
        |-----------------------.--------------------------|
        | M-x: company-complete . (M-/)                    |
        |                                                  |
        |                                                  |
        |                                                  |
        |      No completion.                              |
        |                                                  |
        |                                                  |
        +--------------------------------------------------+


     ```
   #+END_SRC

  --end--
  -----

** TODO Emacs-FAQ: [2018-04-05 Thu 08:55] mode-line-bell-mode 闪烁颜色不明显
   :PROPERTIES:
   :CUSTOM_ID: h-503d610b-8793-4306-9980-5f8d91c03c4d
   :END:


  --end--
  -----

** DONE Emacs-FAQ: [2018-04-07 Sat 10:20] ivy emacs 在开启entropy/X-enable时候，多按两下 有时无法退出minibuffer
   CLOSED: [2018-04-09 Mon 19:11]
   :PROPERTIES:
   :CUSTOM_ID: h-906639bc-9202-414a-a328-d80da2fa16ce
   :END:
   - State "DONE"       from "TODO"       [2018-04-09 Mon 19:11]
   - Note taken on [2018-04-09 Mon 19:10] \\
     这个问题和[[minibuffer存留][下面的一个问题]]是一样的
   - [2018-04-07 Sat 10:21:46] 现在该事件无法被reproduce

  --end--
  -----

** TODO Emacs-FAQ: [2018-04-07 Sat 10:46] 在修改了ibuffer-projectitle的相关性能设置后会导致eyebrowse快捷键丢失
   :PROPERTIES:
   :CUSTOM_ID: h-68c0d343-6d3e-4281-ac1e-f402613de5ab
   :END:
   - [2018-04-07 Sat 10:46:40] 目前没有办法reproduce

  --end--
  -----

** TODO Emacs-FAQ: [2018-04-07 Sat 12:39] orgmode archive undo tree 无法识别
   :PROPERTIES:
   :CUSTOM_ID: h-78349e5d-5662-48d5-9eef-d69111413ef0
   :END:
   - [2018-04-07 Sat 13:22:58] 无法复现，使用org-archive-to-archive-sibling 或org-archive-subtree 都
     无法复现，可能是操作问题

  --end--
  -----

** TODO Emacs-FAQ: [2018-04-08 Sun 22:36] 有道dict有时候childframe无法提示
   :PROPERTIES:
   :CUSTOM_ID: h-0833f4ce-ebdb-47bb-86d5-6e3dfa1fddf4
   :END:


  --end--
  -----

** Doing Emacs-FAQ: [2018-04-09 Mon 05:32] 在windows下使用helm-pt project 方式无法搜索 =.emacd.d= 中的内容 :helm-pt:
   :PROPERTIES:
   :CUSTOM_ID: h-c915dadb-821d-473d-848a-b1224c6d44d6
   :END:
   - State "Doing"      from "TODO"       [2018-04-09 Mon 19:08] \\
     Because is the bug of may not be fixed
   因为没有权限方法 ~/Appdata/Roaming/.emacs.d

  --end--
  -----

** TODO Emacs-FAQ: [2018-04-09 Mon 09:48] minibuffer留存现象
   :PROPERTIES:
   :CUSTOM_ID: h-7ee080b1-ebac-486b-ab19-dc5e8c34cbb9
   :END:
   <<minibuffer存留>>
   由于加载一些函数（entropy/X-enable）需要好长时间，因此此时若你使用键盘，那么如果是非控制键，会导
   致函数加载完后minibuffer仍然开启，并且光标停留在minibuffer，


  --end--
  -----

** DONE [#A] Emacs-FAQ: [2018-04-09 Mon 14:44] org mode 无法再 =+------+= 后回车
   CLOSED: [2018-04-12 Thu 00:34]
   :PROPERTIES:
   :CUSTOM_ID: h-042554c7-8515-474a-8f51-3782961a30d9
   :END:

   - State "DONE"       from "TODO"       [2018-04-12 Thu 00:34]
   比如你先要在下行的末端回车，就会提示： ~funcall-interactively: Wrong type argument: number-or-marker-p, nil~
   #+BEGIN_EXAMPLE
   +-------+
   #+END_EXAMPLE


   [2018-04-09 Mon 15:13:59] 但是可以使用 M-x =new-line= 换行

   [2018-04-12 Thu 00:33:38] 这应该是一个org的设计问题，建议用EXAMPLE元素包含这些字符即可。


  --end--
  -----

** DONE [#A] Emacs-FAQ: [2018-04-09 Mon 17:23] artistmode f5 忘了绑定text-mode
   CLOSED: [2018-04-09 Mon 19:07]
   :PROPERTIES:
   :CUSTOM_ID: h-bb20986e-aeb4-4453-ac74-62581924f6f9
   :END:


   - State "DONE"       from "TODO"       [2018-04-09 Mon 19:07]
  --end--
  -----

** TODO Emacs-FAQ: [2018-04-12 Thu 17:41] popwin无法困住二级窗口
   :PROPERTIES:
   :CUSTOM_ID: h-9210fa70-9c2b-4e94-a205-05d61eeabf78
   :END:
 
   
  --end-- 
  -----

** TODO [#B] Emacs-FAQ: [2018-04-13 Fri 15:58] 是不是有可能不改变counsel-grep-or-swiper的限制参数改用swiper
   :PROPERTIES:
   :CUSTOM_ID: h-f0ca8b94-aecd-41a4-bdc4-13fdfb4aa12a
   :END:
   根据这段代码：
   #+BEGIN_SRC emacs-lisp
   :map counsel-mode-map
   ([remap swiper] . counsel-grep-or-swiper)
   #+END_SRC
   
  --end-- 
  -----

** DONE 为什么在utf-8环境下依然会有中文乱码的问题？
   CLOSED: [2018-04-14 Sat 21:58]
   :PROPERTIES:
   :CUSTOM_ID: h-cf081977-ebcd-4b9c-971d-cf7ec518017f
   :END:
   - State "DONE"       from "TODO"       [2018-04-14 Sat 21:58]
   - State "TODO"       from              [2018-04-14 Sat 21:53]

     
   因为你的wsl环境的语言环境设置有问题，比如在msys2中的 =zh_CN.UTF-8= 的实际值是
   =zh_CN.UTF-8@cjknarrow= ，我不知道是什么东西，但是这的确是导致该问题的原因，因此建议各位wsl使用者
   把语言环境设置为 =C.UTF-8= 。

   #+BEGIN_QUOTE
   如果你是使用mini init方式启动emacs的，那么当你使用 =entropy/X-enable= 后你的shell配置会重新依据
   msys2的语言环境来刷新emacs语言环境，这就是问题所在。
   #+END_QUOTE

** DONE [2018-03-13 Tue 14:18] magit                              :faq:emacs:
   CLOSED: [2018-03-13 Tue 14:42]
   :PROPERTIES:
   :CUSTOM_ID: h-909f38f6-bcdc-493b-8919-7f009535152e
   :END:

   - State "DONE"       from "TODO"       [2018-03-13 Tue 14:42]
   - State "TODO"       from              [2018-03-13 Tue 14:41]
   [[file:../annex/img/Snipaste_2018-03-13_14-29-18_2018-03-13_14-41-26.png]]
 
   [[http://emacs.1067599.n8.nabble.com/Local-variables-list-td333084.html]]
    
 --end-- 
 -----
** TODO [#C] Scattered: [2018-03-15 Thu 21:54] emacs 欢迎界面字体设置方法查询 :faq:emacs:
   :PROPERTIES:
   :CUSTOM_ID: h-c2144142-da7f-4e2f-bd90-bad042fda50e
   :END:
  
  
  --end-- 
  -----
** Recorde: [2017-12-18 Mon 18:36] sogou输入法会导致emacs buffer卡死 :emacs:sogou:arch_linux:faq:
   :PROPERTIES:
   :CUSTOM_ID: h-ad870d6e-9979-41dc-9e23-6b49a68e9cc9
   :END:
   在arch_linux上使用sogou输入法是很方便而且版本是最新的，不过乱序打字是胡导致sogou输入
   发假死（在emacs的buffer中）。从而导致emacs不可用。

   我猜测这是由于搜狗输入法的云打字带来的效率问题，但是只有emacs的buffer会有这样的问题。
   所以这个解释不全面或者不正确，还是需要track 这个bug的。因此我现在转移到了rime上。
    
   12/18/17 7:29 PM rime 也会 开来不是sogou的问题。

   --end--
  -----
** Recorde: [2017-12-30 Sat 14:12] emacs的auto-revert不够及时导致的问题 :emacs:faq:
   :PROPERTIES:
   :CUSTOM_ID: h-c9fe125c-b492-4cf0-94af-e1798046f955
   :END:

   [[file:../annex/img/screenshot_2017-12-30_14-13-58.png]]
    
   [[file:../annex/img/screenshot_2017-12-30_14-14-50.png]]


  --end-- 
  -----
** TODO [#B] Recorde: [2018-01-03 三 01:48] emacsdaemon启动一个bug :faq:emacs:
   :PROPERTIES:
   :CUSTOM_ID: h-271e4e7b-eada-49ba-95ae-21f2439d437f
   :END:
   - State "TODO"       from              [2018-01-03 三 02:08]
   https://github.com/syl20bnr/spacemacs/issues/5978

   #+BEGIN_SRC 
   Error during redisplay: (eval (window-numbering-get-number-string)) signaled (wrong-type-argument hash-table-p nil)
   #+END_SRC
  
  这个问题只有在用daemon的gui启动才会出现在message的buffer里。


  --end-- 
  -----
** TODO [#C] 在使用root用户打开emacs的时候默认使用了当前普通用户的配置文件的问题 :faq:linux:emacs:
   :PROPERTIES:
   :CUSTOM_ID: h-3fa841a0-4ce8-4333-ae32-0971d260e199
   :END:
   - State "TODO"       from              [2018-04-15 Sun 05:38]
   # draft:
   # roog bug
   # tramp配置
      
   我在网上搜索了这个问题，但是我没有搜索到相匹配的答案。不过我自己思索出了其中的原因，
   不，这不是一个bug。

   我猜想这是内嵌在emacs软体内部的功能：\\
   因为一般都是普通用户自己su来使用roog账户的，这种情况下，为了迎合每一个普通用户的
   emacs使用方式，所以emacs内部以当前普通用户的配置为基准让用户使用具有root权限的
   emacs。

   这里的猜想的有一个依据是，我直接以root登录系统使用emacs是使用的root自己的emacs配置。

   当然我没有用其他普通用户测试，不过我觉的不用了。（懒一把）
*** 怎样使用emacs来编辑需要root权限的文件。
    :PROPERTIES:
    :CUSTOM_ID: h-0f789301-f23d-4c36-bc93-76e85f5d91b4
    :END:
    一个是使用tramp功能，具体的我没有深入阅读文档，这里我留下了资料：
      
   [[https://emacs.stackexchange.com/questions/52/edit-file-with-super-user-rights]]

   [[file:../annex/img/screenshot_2018-01-03_18-57-24.png]]
*** CANCEL [#B] 使用ivy模式的root编辑功能来编辑文件
    CLOSED: [2018-04-12 Thu 00:41]
    :PROPERTIES:
    :CUSTOM_ID: h-e7888854-f9c4-4f83-9b15-1e7b5ecf426e
    :END:
    - State "CANCEL"     from "TODO"       [2018-04-12 Thu 00:41] \\
      应该就是counsel-tramp了
    - State "TODO"       from              [2018-01-04 Thu 14:19]
    [2018-01-04 Thu 14:13:04]
    这个功能我突然找不到了，但是一定有：
       
    特征是 打开一个文件它会询问权限。

    现在的做法是在 =C-x C-f= 或者 =C-x d= 中输入 =/sudo::= 来进入root目录（同时开启root权限）。
     
    同时可以在 =::= 后面来输入路径，但是不支持补全知道按下tab键盘后会自动转入下一个action。
     
    [2018-03-09 Fri 20:07:54] 找到 疑似 counsel-tramp ~C-c s t~
** TODO [#D] Recorde: [2018-01-05 Fri 15:10] neotree 浏览图片文件夹卡顿 :faq:emacs:
   :PROPERTIES:
   :CUSTOM_ID: h-1e03c4cf-03b6-428f-9a9c-0caec392bea1
   :END:
  
   
   - State "TODO"       from              [2018-04-15 Sun 05:38]
  --end-- 
  -----
** Hangup [2/2] Scattered: 向cnfonts的维护者tumashu报告关于打开org大文件cnfonts有嫌疑使得emacs闪退 :emacs:faq:cnfonts:
   CLOSED: [2017-12-31 日 22:59] SCHEDULED: <2017-12-31 11:00 Sun>
   :PROPERTIES:
   :CUSTOM_ID: h-04d316b4-0018-45fa-bb1c-d94b0c76c7da
   :END:
 
   - State "Hangup"     from "TODO"       [2017-12-31 日 22:59] \\
     并不是 cnfonts的问题
   - [X] 初始化emacs配置文件的experiment实验配置，并创建maintenance分支和原始空白分支。
   - [X] 对空白分支添加cnfonts配置进行测试
*** [2017-12-31 Sun 18:14:20] 报告
    :PROPERTIES:
    :CUSTOM_ID: h-4215a567-fa95-453b-be5e-fbc150372698
    :END:
    经调查：
    
    - 完全无配置的情况下会发生
    - 只加载cnfonts会发生
    
      
    那就是说emacs的问题，或者更加直观的说是org-mode的问题。
   
  --end-- 
  -----
** Emacs-FAQ: [2018-03-12 Mon 21:56] magit 不知道何时才会yes-or-no
   :PROPERTIES:
   :CUSTOM_ID: h-7b7f6e46-0238-4f08-a9be-68fe685bf65c
   :END:
   [2018-03-13 Tue 16:12:25] 似乎只有在 =deleted= 项目的stage才会显示yes-or-no 我认为这是因为怕误
   删的原因。
   
  --end-- 
  -----
** Emacs-FAQ: [2018-03-13 Tue 12:39] emacs wsl 的shell中首当其冲使用的 =/usr/bin= 的可执行程序
   :PROPERTIES:
   :CUSTOM_ID: h-e6aaeddf-b1f5-4f58-b04a-29bd965affc3
   :END:
   也就是说 wsl 中的 =/usr/bin= 在emacs shell 中 PATH 中是排第一位的。
   
  --end-- 
  -----
** TODO [#C] Emacs-FAQ: [2018-03-13 Tue 17:23] windows emacs 提示两个文件相同
   :PROPERTIES:
   :CUSTOM_ID: h-db722672-5edd-4af2-83c0-8e69c07cb0e0
   :END:
 
   
  --end-- 
  -----
** TODO [#B] Emacs-FAQ: [2018-03-15 Thu 22:04] 不同的字体设置可能会给emacs带来卡顿 :性能:hllinemode:
   :PROPERTIES:
   :CUSTOM_ID: h-714941c0-86ba-45b2-8659-d3e51d524c5b
   :END:
   - [2018-03-17 Sat 20:07:07]\\
     这与emacs的版本也有关系25.3 比25.2好，并且开启hl-line-mode也不会卡。但是27又会卡。

       
   
  --end-- 
  -----
** Recorde: [2017-12-22 Fri 23:47] orgmode中对代码块进行折叠会假死 只要用快捷键 =C-g= 取消就可以了，不需要kill :org:faq:
   :PROPERTIES:
   :CUSTOM_ID: h-aa0f4f49-6d20-4bd6-9392-22eb1b93c393
   :END:
*** TODO [#B] [2017-12-23 Sat 04:23:26] 这是一个bug，还没查明。
    :PROPERTIES:
    :CUSTOM_ID: h-44ee4a07-93ce-4852-ad8f-731ce2016e40
    :END:
    - State "TODO"       from              [2017-12-23 Sat 04:23]
    我用终端来测试过了，在用我的配置文件的情况下依然假死。
    但是无配置启动没有问题。
**** [2017-12-23 Sat 04:27:37] 我怀疑和org的代码运行相关设置有关。
     :PROPERTIES:
     :CUSTOM_ID: h-4fcea11d-dcde-4887-97cc-c803aaae3f54
     :END:
   --end-- 
   -----
** Recorde: [2017-12-23 Sat 04:35] orgmode现在的版本貌似无法对 =++1d= 这个循环变量做自动更迭为下一个周期了。 :org:faq:
   :PROPERTIES:
   :CUSTOM_ID: h-22a8f7b4-66dc-48da-958b-28efc8d89e55
   :END:
*** [2017-12-23 Sat 04:38:29]
    :PROPERTIES:
    :CUSTOM_ID: h-cc829f1f-1841-4688-a08f-2fee746bcf92
    :END:
    仔细想一下这种状况更好，因为如果发生这种情况那么一定是这个任务很多天没有做了这样就
    可以对这个任务进行任务拖延报告了。

    但是orgzly貌似还是迭代为下一次周期的。
*** [2017-12-23 Sat 06:27:49]   
    :PROPERTIES:
    :CUSTOM_ID: h-bf31d447-cb57-4080-90c1-923bcefe6d5d
    :END:
    并不是这样的，只是还买有到时间周期的当前时间周期，因此它会滞留在上一个时间周期。

    也就是说如果一个循环任务已经搁置了很多天，那么现在对它进行done的标记的时候，首先会
    检查目前时间所处在的周期位置：
     
    详细了解：
     
    - 时间周期：
      不管是计划时间还是截止时间都是一个时间戳
    - 日程表
      日程表是显示时间戳在当天的任务和已经逾期的截止任务，还有计划任务

    因此可以有两个轴线概念，一个是周期时间戳轴，另一个是日期轴。

    [[file:../annex/img/org-agenda_2017-12-23_15-55-25.svg]]
     
    现在有一个问题，就是我通常都是直接对任务做流程标记，并不关心它的先前状态，那么这势
    必会导致一个常见bug：\\
    我今天打上的标记在我的意识中是今天的任务标记，但是由于先前状态的问题，会打在上一次
    没做转换标记的标签上。

    为了解决这个矛盾我势必需要仔细查看agenda里的任务视图，即确定是否逾期（这是可以发现
    的）。
**** [2017-12-23 Sat 16:02:38]
     :PROPERTIES:
     :CUSTOM_ID: h-7ab64374-9203-4275-bf7e-ca4ed22baabe
     :END:
     之前对于这个问题还有一个问题追踪，就是对于逾期超过很多天的任务，在做任务转换的时候
     会有逾期提示：
     #+BEGIN_QUOTE
     10 repeater intervals were not enough to shift date past today.  Continue? (y or n) y
     #+END_QUOTE
      
     问题是在这种状态下是否也是上述描述中的状况，答案是：yes。
     
     



   --end--
   -----

** TODO [#B] Emacs-FAQ: [2018-04-15 Sun 07:54] org download delete 当光标在链接第一个字母处无法成功处理
   :PROPERTIES:
   :CUSTOM_ID: h-a153b23b-4e78-47f8-9da0-682bc5f8e575
   :END:
 
   
  --end-- 
  -----

** DONE Emacs-FAQ: [2018-04-15 Sun 17:17] org caputure 导致emacs的bookmark重新编码冲突
   CLOSED: [2018-04-17 Tue 02:20]
   :PROPERTIES:
   :CUSTOM_ID: h-02d6c422-b5fe-4554-9ee7-3af5ea82ef4a
   :END:
 
   
   - Note taken on [2018-04-17 Tue 02:20] \\
     Fix it through redefine the bookmark-set function in windows
   - State "DONE"       from "TODO"       [2018-04-17 Tue 02:20]
  --end-- 
  -----

** TODO Emacs-FAQ: [2018-04-17 Tue 19:45] url cookies
   :PROPERTIES:
   :CUSTOM_ID: h-9cd77d3c-b07e-4c61-a505-861f355466ff
   :END:
    - State "TODO"       from              [2018-04-17 Tue 19:45]   
   
  --end-- 
  -----

** TODO [#A] Emacs-FAQ: [2018-04-21 Sat 03:36] org输出html会调用tern
   :PROPERTIES:
   :CUSTOM_ID: h-eeeec3b8-939f-4537-a69c-69413bb38dc3
   :END:
   - State "TODO"       from              [2018-04-21 Sat 03:36]   
   

   #+BEGIN_EXAMPLE
   error in process filter: tern-req-finished: Selecting deleted buffer
   #+END_EXAMPLE
   
   tern我只是在开启web-mode和js2-mode的时候引用，并且我更改了org的htmlblock的连接模式为web-mode,我是
   因为这个原因。
   
  --end-- 
  -----

** TODO [#A] Emacs-FAQ: [2018-04-23 Mon 06:23] emacs 26以上无法使用tern
   :PROPERTIES:
   :CUSTOM_ID: h-80859a34-8217-449a-a4f3-31b154a02d60
   :END:
   - State "TODO"       from              [2018-04-23 Mon 06:23]   
   
  --end-- 
  -----

** TODO [#A] Emacs-FAQ: [2018-04-23 Mon 06:24] emacs 除了25.3版本 其他版本对于无法显示的字体特别卡
   :PROPERTIES:
   :CUSTOM_ID: h-de866771-ae41-4ea5-8f95-0dca9005798c
   :END:
   - State "TODO"       from              [2018-04-23 Mon 06:24]   
   

   - [[https://lists.gnu.org/archive/html/bug-gnu-emacs/2016-11/msg00469.html][主页mailinglist 同样的问题 设置 inhibit-compacting-font-caches to non-nil]]\\
     
     至少这样做可以解决一下问题:
     - 第二次 开启describe-char的 symbol 很滑顺（需要加入启动设置）

     但是依然没有解决大量无字体编码buffer卡顿厉害的问题,比如在view hello file 中 和 unicode bmp中。
     这个方法也被purcell大神采用：https://github.com/purcell/emacs.d/issues/273。 我准备在这个已经关
     闭的issue中继续像大神们提问：
     #+BEGIN_SRC markdown
       Hi everyone who seem to solve this problem by set `inhibit-compacting-font-caches` to `t`:

       There's much more problem from here like the friend upon said it.

       I found enable the compact option can solve the minimal region with unicode character but the larger
       one like buffer in describe-char's `*help-mode*` buffer with chosen the candidate of unicode-bmp.

       Or if you call the `view-hello-file`, the chance you can try now :thumbsup-tone5: .

       Plattform: win10 daily updately
       Emacs version: 25.2 25.3.1 26.1-rc1 27.0.50
       Whether clean init: Yes
       Language Environment: Both gbk and utf-8-unix
     #+END_SRC

  --end-- 
  -----

** TODO [#B] Emacs-FAQ: [2018-04-23 Mon 19:46] org agenda todo dispatcher didn't have enough height when in middle frace size
   - State "TODO"       from              [2018-04-23 Mon 19:46]   
   
  --end-- 
  -----

** TODO [#A] Emacs-FAQ: [2018-04-25 Wed 00:55] emacs 打字会突然卡一下 windwos
   - State "TODO"       from              [2018-04-25 Wed 00:55]   
   
  --end-- 
  -----

* Trouble Trace
  :PROPERTIES:
  :CUSTOM_ID: h-72e6325f-dbdc-4bf4-99e5-60152d00c60c
  :END:
** DONE Draft-Recorde: [2018-04-11 Wed 16:39]  org-agenda 改变一个entry的状态的时候会跳转到一个文件？ :emacs:faq:org:agenda:
   CLOSED: [2018-04-12 Thu 20:10]
   :PROPERTIES:
   :CUSTOM_ID: h-c5679162-aae5-419f-94a0-a1827d8f0057
   :END:
   - State "DONE"       from              [2018-04-12 Thu 20:10]


   1. 当在org-agenda中修改一个在buffer区是只读的文件的时候，会跳转到该文件，并报出错误
      : org-self-insert-command: Buffer is read-only: #<buffer tree.org> [2 times]

   2. 当启用org-agenda recorde 功能的时候 因为会切换到recorde区域，而recorde区域是半屏的，所以会露出
      背后在进行agenda操作时候打开的buffer，emacs默认排序buffer的顺序是按照打开时间来排序的。


  --end--
  -----

* TODO:
  :PROPERTIES:
  :CUSTOM_ID: h-2572fdb4-7ba0-465b-8ca9-e46aa4160d1a
  :END:
** Hangup [#C] Emacs-FAQ: [2018-04-07 Sat 23:15] 想要实现一个功能
   CLOSED: [2018-04-09 Mon 19:19]
   :PROPERTIES:
   :CUSTOM_ID: h-8bc6fad3-6ca2-4977-a232-8ad0b342d5b4
   :END:
   - Note taken on [2018-04-13 Fri 18:33] \\
     Maybe can use the hook. But I can not find the hook like the form about =org-capture-hook=
   - State "Hangup"     from "TODO"       [2018-04-09 Mon 19:19]
   - Note taken on [2018-04-09 Mon 19:18] \\
     At present, the manually scheme is to save file in capture mode buffer and use magit-stage
   当capure后自动git stage 一个文件

   最好可以分文件设置，也就是指定一个文件使用这个功能


  --end--
  -----
** TODO [#B] 加入bookmark-plus
   :PROPERTIES:
   :CUSTOM_ID: h-d4657b56-704b-4aff-b794-3fa4680ccf44
   :END:
   - State "TODO"       from              [2018-04-09 Mon 13:59]
** Doing [#A] 把entropy-repo以emacs mode的方式实现出来                                     :PROJECT:
   :PROPERTIES:
   :CUSTOM_ID: h-f752e498-8e6d-4939-80ab-04f5a798944f
   :END:
   - State "Doing"      from "TODO"       [2018-04-18 Wed 23:22]
   - State "TODO"       from              [2018-04-13 Fri 22:47]
*** 分步执行     
    :PROPERTIES:
    :CUSTOM_ID: h-b00a16cb-bcda-4401-80d7-7d321d02f498
    :END:
**** 使用ivy选取tree.org中的标题并跳转到它的目录
     :PROPERTIES:
     :CUSTOM_ID: h-d407b042-6e87-437c-a0db-f7d7a2df92e1
     :END:
***** Hangup 怎样提取项目地址
      CLOSED: [2018-04-19 Thu 00:29]
      :PROPERTIES:
      :CUSTOM_ID: h-133615cd-80df-4eac-b50e-9d124adfd629
      :END:
      - State "Hangup"     from "TODO"       [2018-04-19 Thu 00:29] \\
        已经初步完成
      - State "TODO"       from              [2018-04-13 Fri 22:49]
        
        
      目前找到这两个函数:
      - =substring=
      - =split-string=

        
      [2018-04-14 Sat 06:40:38] 又找到一个正则搜索函数 =re-search-forward=\\
      具体用法来自：[[https://superuser.com/questions/345084/how-to-exclude-in-flyspell-mode-and-flyspell-buffer/345461#345461][link]]
      #+BEGIN_SRC emacs-lisp
        (defun flyspell-ignore-verbatim ()
          "Function used for `flyspell-generic-check-word-predicate' to ignore {{{ }}} blocks."
          (save-excursion
            (widen)
            (let ((p (point))
                  (count 0))
              (not (or (and (re-search-backward "^{{{" nil t)
                            (> p (point))
                            ;; If there is no closing }}} then assume we're still in it
                            (or (not (re-search-forward "^}}}" nil t))
                                (< p (point))))
                       (eq 1 (progn (while (re-search-backward "`" (line-beginning-position) t)
                                      (setq count (1+ count)))
                                    (- count (* 2 (/ count 2))))))))))
        (put 'text-mode 'flyspell-mode-predicate 'flyspell-ignore-verbatim)
      #+END_SRC
      
      [2018-04-17 Tue 16:06:48] find-file-noselect is a compiled Lisp function in ‘files.el’.\\
      这是一个打开文件但不选中buffer的函数，或许可以用来为读入tree的信息做准备

      [2018-04-19 Thu 00:25:26] find-file-select 并不能用来影藏buffer并焦点至于它。应该使用
      with-temp-buffer。

      [2018-04-19 Thu 00:28:59] 已经初步完成了这个功能。
**** TODO 使用elisp来复制模板项目
     :PROPERTIES:
     :CUSTOM_ID: h-9c31e976-5bb3-441c-9e63-53fd45a1434e
     :END:
     - State "TODO"       from              [2018-04-19 Thu 00:30]
** TODO [#A] [2018-04-14 Sat 00:07] 加入设置tab宽度的自定义变量
   :PROPERTIES:
   :CUSTOM_ID: h-59e845db-9266-454f-b260-bf721c333980
   :END:
 
   
  --end-- 
  -----

** Hangup Scattered: Specifying File Variables                        :emacs:
   SCHEDULED: <2017-12-07 Thu>
   :PROPERTIES:
   :CUSTOM_ID: h-ae10d2ea-a302-4ef8-b144-489a4f658a50
   :END:
   
   - State "Hangup"     from "Doing"      [2017-12-10 Sun 06:27]
   - State "Doing"      from "TODO"       [2017-12-08 Fri 03:34]
   [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html][网页链接：51.2.4.1 Specifying File Variables]] \\
*** 12/08/17 3:33 AM   大概笼统的介绍是，文件特殊变量是在emacs中定义了这个文件的一些属性。但是我无法在这个网
    :PROPERTIES:
    :CUSTOM_ID: h-71f396de-b5ee-4a81-8f37-e7dbbd9f2ad2
    :END:
    页中找到相关变量列表个对应的值。
   
   
   
  --end-- 
  -----
** Hangup Scattered: 学习使用auto-load eval-afer-load usepackage优化emacs启动速度 :emacs:
   CLOSED: [2017-12-27 Wed 04:17]
   :PROPERTIES:
   :CUSTOM_ID: h-478e7f58-230b-470b-b765-a3e311d4956a
   :END:
   - State "Hangup"     from "TODO"       [2017-12-27 Wed 04:17]
*** 12/10/17 10:29 AM
    :PROPERTIES:
    :CUSTOM_ID: h-918f475c-a3a6-485e-b97e-f6bb47863c49
    :END:
    我发现楼上的诸位，包括众多用户都没有发现 Emacs 有一个功能能让它秒启动。那就是
    dump-emacs 。把你所有配置加载以后 dump 出一个镜像，之后只要用这个镜像就能秒启动。号
    称 1 万行配置只要半秒，118 MB 包启动不到一秒。Lisp 专属黑科技。

    作者：知乎用户
    链接：https://www.zhihu.com/question/37234774/answer/191397083
    来源：知乎
    著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
  
  --end-- 
  -----
*** 12/10/17 10:32 AM use ~M-x emacs-init-time~ checkout the emacs init time
    :PROPERTIES:
    :CUSTOM_ID: h-47966172-0c72-4398-9dd1-cd3828575c91
    :END:
** TODO [#B] Recorde: [2017-12-17 Sun 05:01] gnus-learning       :gnus:emacs:
   :PROPERTIES:
   :CUSTOM_ID: h-e75d90a5-2185-4234-8931-cae7caad7977
   :END:
   - State "TODO"       from              [2018-04-01 Sun 21:57]
*** links
    :PROPERTIES:
    :CUSTOM_ID: h-6676f6e2-a7c6-4caa-a77f-1e19a1bdf7f8
    :END:
**** [[https://www.ibm.com/developerworks/cn/linux/l-cn-emacsgnus/index.html][一个国人写的教程]]
     :PROPERTIES:
     :CUSTOM_ID: h-c4235609-7d49-4a4e-b839-108091fba0c1
     :END:
**** [[https://koldfront.dk/text/gnus-email-tutorial.html][简易教程--国外网站]]
     :PROPERTIES:
     :CUSTOM_ID: h-c4b2ab27-832b-4ef1-be58-4098a473dca1
     :END:
**** [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org][one introduction of specify gnus at github]] 
     :PROPERTIES:
     :CUSTOM_ID: h-d6e0c5bd-b7f4-4ebd-be62-3c308731f62c
     :END:
**** [[https://www.emacswiki.org/emacs/init-gnus.el][emacs-wiki 上的一个全面的例子]]
     :PROPERTIES:
     :CUSTOM_ID: h-8e4e34ba-28a3-41b0-9bd5-519697561e4d
     :END:
**** [[https://stackoverflow.com/questions/22851076/sending-emails-with-emacs24-via-smtp-with-gnutls-and-extra-arguments][解决ssl问题但是还是不能发送给]]
     :PROPERTIES:
     :CUSTOM_ID: h-469090d9-051a-40cf-8928-143984e2f302
     :END:
**** [[http://blog.csdn.net/chenfei_5201213/article/details/10138969][SMTP错误码/建议解决方法]]
     :PROPERTIES:
     :CUSTOM_ID: h-c809aae0-c8ba-45f8-918d-a3ce67c7527c
     :END:
*** 基本概念
    :PROPERTIES:
    :CUSTOM_ID: h-80793850-3347-4ee0-b261-97f0ac0f0f04
    :END:
**** 邮件
     :PROPERTIES:
     :CUSTOM_ID: h-03176f64-b5f1-4955-87fb-54a782e07b34
     :END:
**** 新闻组
     :PROPERTIES:
     :CUSTOM_ID: h-abcacd87-afb3-467f-9501-6afa3ccc3a88
     :END:

** TODO [#B] Recorde: [2017-12-10 Sun 04:44] org任务跟踪                :org:
   :PROPERTIES:
   :CUSTOM_ID: h-137db399-b545-4c0e-afc8-adc117e4eb12
   :END:
   - Note taken on [2017-12-16 Sat 18:05] \\
     1. 这个功能来使一个任务进行状态切换的时候能够记录状态更改的时间和描述。\\
        - 使用符号 =@= 是用来记录描述原因的。
        - 使用符号 =!= 来记录任务状态更改的时间状态。
        - 可以使用 =@/!= 来一起使用这些特性。
     2. 使用属性，这我没看懂：
      
     [[file:../annex/img/screenshot_2017-12-16_18-10-19.png]]
   - State "TODO"       from              [2017-12-10 Sun 04:46]
   [[http://orgmode.org/manual/Tracking-TODO-state-changes.html][Tracking TODO state changes]]
  
  --end-- 
  -----
** CANCEL [#B] Recorde: [2017-12-08 Fri 09:49] 使用autoload和eval-after-load优化emacs启动速度 :emacs:
   CLOSED: [2018-04-19 Thu 00:33]
   :PROPERTIES:
   :CUSTOM_ID: h-c50c91c0-bf78-41a2-a5cb-6c4bc8b30a29
   :END:
   - State "CANCEL"     from "TODO"       [2018-04-19 Thu 00:33] \\
     现在使用use-package
   - State "TODO"       from              [2017-12-10 Sun 13:32]
*** 学习记录：
    :PROPERTIES:
    :CUSTOM_ID: h-ac2cddd4-f9ed-41b8-9125-b860941ab8ea
    :END:
  --end-- 
  -----

** TODO [2018-04-15 Sun 04:48] 批量org refile
   :PROPERTIES:
   :CUSTOM_ID: h-71595abe-6e72-4b18-84a4-bf3d44ad3aa0
   :END:
   - [[https://superuser.com/questions/613968/how-to-automate-org-refile-for-multiple-todo][一个概念的回复]]
 
   
  --end-- 
  -----

** DONE Scattered: 对于openwith-mode 在orgmode中禁用的方法计划 :org:emacs:faq:
   CLOSED: [2018-03-16 Fri 18:26]
   :PROPERTIES:
   :CUSTOM_ID: h-168ace04-dd2e-4ffb-9602-ab31fed58db3
   :END:
   - State "DONE"       from "TODO"       [2018-03-16 Fri 18:26]
*** [2018-01-02 二 18:37:04] 发现一个参数 =org-file-apps= 可以用来在orgmode中打开external app
    :PROPERTIES:
    :CUSTOM_ID: h-3e081707-fc63-4a7c-9b47-3530ca846a06
    :END:
    
  
   --end-- 
   -----
*** [2018-01-02 Tue 22:38:34] 这个需要elisp的只是先取消计划
    :PROPERTIES:
    :CUSTOM_ID: h-1657b03f-e4c8-4979-aec5-932566cf6840
    :END:
*** [2018-03-16 Fri 18:25:24] 设置很简单
    :PROPERTIES:
    :CUSTOM_ID: h-d529d883-fe95-46ee-a7be-228398fbcd55
    :END:
    #+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
	  '(lambda ()
	     (delete '("\\.x?html?\\'" . default) org-file-apps)
	     (add-to-list 'org-file-apps '("\\.x?html?\\'" . system)))
	  )
    #+END_SRC

** TODO [2018-04-15 Sun 08:36] 熟悉revealjs ox-reveal
   :PROPERTIES:
   :CUSTOM_ID: h-0f649487-9815-4d77-85b8-0f1750c04524
   :END:
   - 解决一个问题： 怎样逐个显示条目\\
     根据[[https://www.youtube.com/watch?v=psDpCpcIVYs][这个视频]] 中了解到 我所谓的逐个显示 在reveal-js中是用 =roll-in= 来描述的，它的具体用法是：
     #+BEGIN_SRC org
       ,#+ATTR_REVEAL :frag roll-in
     #+END_SRC
     如图：

     [[file:../annex/img/Snipaste_2018-04-17_05-11-47_2018-04-17_05-12-09.png]]

   
   
  --end-- 
  -----

** TODO [#C] [2018-04-15 Sun 08:56] 学习Powerline config
   :PROPERTIES:
   :CUSTOM_ID: h-583815eb-ea98-4f7c-950a-60201087c580
   :END:
 
   
  --end-- 
  -----

** DONE [#A] Scattered: [2018-04-15 Sun 04:49] 增加 org template的todo初始化时间戳
   CLOSED: [2018-04-17 Tue 11:26]
   :PROPERTIES:
   :CUSTOM_ID: h-36453401-95b8-4c75-99e2-445559f1ef4e
   :END:
  
  
   - State "DONE"       from "TODO"       [2018-04-17 Tue 11:26]
  --end-- 
  -----

** CANCEL [#A] [2018-04-17 Tue 05:13] 尝试绑定end到org-end-of-line 看看是否会改善链接的行尾跳转效果
   CLOSED: [2018-04-17 Tue 11:33]
   :PROPERTIES:
   :CUSTOM_ID: h-41307eea-0a29-4dc4-a8fa-be2b325f4d95
   :END:
 
   
   - State "CANCEL"     from "TODO"       [2018-04-17 Tue 11:33] \\
     好像有用先设置了再说
  --end-- 
  -----

** TODO [2018-04-19 Thu 04:32] multi shell in windows
   :PROPERTIES:
   :CUSTOM_ID: h-fb8b70c1-2150-4ecb-a46c-89c8b2a56da7
   :END:
    - State "TODO"       from              [2018-04-19 Thu 04:32]   
   
  --end-- 
  -----

** Hangup [#A] [2018-04-19 Thu 04:32] org capture hook of unlock readonly automaticly
   CLOSED: [2018-04-19 Thu 12:22]
   :PROPERTIES:
   :CUSTOM_ID: h-4b28550d-18f5-4d22-82bc-5a00b1406c66
   :END:
   - State "Hangup"     from "TODO"       [2018-04-19 Thu 12:22] \\
     Now use use the entropy/global-toggle-read-only hacking into it.
     
     After for whilc will modify the whole function for native toggle read-only mode without choose the
     canditates for confirmed.
 - State "TODO"       from              [2018-04-19 Thu 04:32]   
   
  --end-- 
  -----

** TODO [2018-04-19 Thu 05:20] 增加关于css的struct mode 还有扩展现有语的sruct mode
   :PROPERTIES:
   :CUSTOM_ID: h-29a93620-5e53-45a9-9d3f-fc25499107f6
   :END:
   - State "TODO"       from              [2018-04-19 Thu 05:20]   
   
  --end-- 
  -----

** DONE [#A] [2018-04-19 Thu 05:24] 根据模板改进 org capture template 的时间戳缩进
   CLOSED: [2018-04-19 Thu 07:56]
   :PROPERTIES:
   :CUSTOM_ID: h-bedc12f9-f47f-45a1-a085-c7c884580898
   :END:
   - State "DONE"       from "TODO"       [2018-04-19 Thu 07:56]
   - State "TODO"       from              [2018-04-19 Thu 05:24]   
   
  --end-- 
  -----

** TODO [#A] [2018-04-19 Thu 05:50] 写一个自制的orgstruct =C-c C-p= 等等
   :PROPERTIES:
   :CUSTOM_ID: h-1004ca79-8b14-4c10-8bae-18883c87ec2b
   :END:
   - State "TODO"       from              [2018-04-19 Thu 05:50]   
   
  --end-- 
  -----

** TODO [#B] [2018-04-19 Thu 07:49] 查找一下关于函数跳转的包(括号跳转也可以)
   :PROPERTIES:
   :CUSTOM_ID: h-d02a7c48-526b-4848-aa8b-3da5b6fdddce
   :END:
   - State "TODO"       from              [2018-04-19 Thu 07:49]   
   
  --end-- 
  -----

** TODO [2018-04-19 Thu 09:43] 尝试修改roman字体，好像字体设置可以在往下分的
   :PROPERTIES:
   :CUSTOM_ID: h-d14ded19-448e-4639-850d-8cda5338ad1a
   :END:
   - State "TODO"       from              [2018-04-19 Thu 09:43]   
   
  --end-- 
  -----

** TODO [#A] [2018-04-20 Fri 17:47] 更新README 根据现有配置 比如init-basic的自定义工具和init-tools的自定义工具介绍
   :PROPERTIES:
   :CUSTOM_ID: h-b23c3b2a-ecae-475a-9dd6-0f1644eb486c
   :END:
   - State "TODO"       from              [2018-04-20 Fri 17:47]   
   
  --end-- 
  -----

** TODO [#A] [2018-04-20 Fri 19:12]  更改 =yas/expand= 的默认tab触发机制，因为这会和orgstruct冲突导致误操作
   :PROPERTIES:
   :CUSTOM_ID: h-7a5ff294-a087-4e92-be0f-45a53f401066
   :END:
   - State "TODO"       from              [2018-04-20 Fri 19:12]   
   
  --end-- 
  -----

** TODO [#A] [2018-04-20 Fri 22:25] readme中加入google翻译阐释
   :PROPERTIES:
   :CUSTOM_ID: h-4e0e0818-21bc-4567-96ca-57cb0579e4c9
   :END:
   - State "TODO"       from              [2018-04-20 Fri 22:25]   
   
  --end-- 
  -----

** TODO [#A] [2018-04-20 Fri 22:43] 在readme中介绍cmder如何设置cmder的编写home目录和alias
   :PROPERTIES:
   :CUSTOM_ID: h-a68d0ef8-c045-42d7-bc82-b496249ae60d
   :END:
   - State "TODO"       from              [2018-04-20 Fri 22:43]   
   
  --end-- 
  -----

** TODO [#A] [2018-04-22 Sun 02:28] org agenada commands 深入学习
   :PROPERTIES:
   :CUSTOM_ID: h-c0a1ee50-b619-48e0-94c6-3780afbe028f
   :END:
   - State "TODO"       from              [2018-04-22 Sun 02:28]   
   
     
   链接整理:
   - [[https://orgmode.org/manual/Special-agenda-views.html][special agenda views]]
   - [[https://emacs.stackexchange.com/questions/17960/emacs-org-mode-how-to-use-or-in-org-agenda-custom-command][commands match regexp]]\\
     The first was the man whoh post his =org-agenda-custom-commands= list:
     #+BEGIN_SRC emacs-lisp
       (setq org-agenda-custom-commands '(
         ("d" "Daily "(
           (tags-todo "+TODO=\"TODO\" -PRIORITY=\"C\" "  ( ; works
           (org-agenda-sorting-strategy '(priority-down))
           ))
         (tags-todo "+TODO=\"TODO\" +PRIORITY={\"B\"|\"A\"} "  ( ; works NOT
           (org-agenda-sorting-strategy '(priority-down))
           ))
         (tags-todo "+TODO=\"TODo\"  {+PRIORITY=\"B\"}|{+PRIORITY=\"A\"} "  ( ; works NOT
           (org-agenda-sorting-strategy '(priority-down))
           ))
         ))
       ))
     #+END_SRC
     There were two things I noticed that:
     1. He use the character '+' or '-' to do the things of limiting the match range of what type
        ordering.
     2. use "{}" to insert the complicated regexp contrast from ~\"blahblah\"~ .
     3. the sorting method for agenda buffer of =org-agenda-sorting-strategy= but I can't find it in
        emacs 25.2 .\\
        [2018-04-22 Sun 03:26:38] I'm wrong it's variable not function, that explain it 🤦.
        
     But this post have the mistake in regexp for '|', just follow the explain by the contributor of
     this quetion:
     #+BEGIN_QUOTE
     The contents of {} in an agenda command are regular expressions. So something like
     PRIORITY={\"B\"|\"A\"} will only match if PRIORITY is "A" or "B", including the quotes. You
     also need more escaping in you regex (\\| instead of |). A regex won't work if you don't pay
     the slash tax.

     The correct search is +PRIORITY={A\\|B}. You can also simplify things a little by using the /
     syntax. Anything following a / is assumed to be a TODO keyword. So +PRIORITY={A\\|B}/TODO will
     find all entries with keyword TODO and priority A or B.
     #+END_QUOTE
   - [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][A agenda commands introducion by whom introduction emacs in youtube I seen before.]]



    
     

  --end-- 
  -----

** TODO [#A] [2018-04-23 Mon 07:59] 学习如何在emas中设置字体（按照编码区间）
   :PROPERTIES:
   :CUSTOM_ID: h-28d56242-b6a9-454d-a109-22be86ba96ea
   :END:
   - State "TODO"       from              [2018-04-23 Mon 07:59]   
   
  --end-- 
  -----

